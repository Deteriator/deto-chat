{"filter":false,"title":"pubapi.js","tooltip":"/Htmly folder/pubapi.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":3206,"column":1},"action":"insert","lines":["/*! 3.14.5 / web */","(function webpackUniversalModuleDefinition(root, factory) {","\tif(typeof exports === 'object' && typeof module === 'object')","\t\tmodule.exports = factory();","\telse if(typeof define === 'function' && define.amd)","\t\tdefine([], factory);","\telse if(typeof exports === 'object')","\t\texports[\"PUBNUB\"] = factory();","\telse","\t\troot[\"PUBNUB\"] = factory();","})(this, function() {","return /******/ (function(modules) { // webpackBootstrap","/******/ \t// The module cache","/******/ \tvar installedModules = {};","","/******/ \t// The require function","/******/ \tfunction __webpack_require__(moduleId) {","","/******/ \t\t// Check if module is in cache","/******/ \t\tif(installedModules[moduleId])","/******/ \t\t\treturn installedModules[moduleId].exports;","","/******/ \t\t// Create a new module (and put it into the cache)","/******/ \t\tvar module = installedModules[moduleId] = {","/******/ \t\t\texports: {},","/******/ \t\t\tid: moduleId,","/******/ \t\t\tloaded: false","/******/ \t\t};","","/******/ \t\t// Execute the module function","/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);","","/******/ \t\t// Flag the module as loaded","/******/ \t\tmodule.loaded = true;","","/******/ \t\t// Return the exports of the module","/******/ \t\treturn module.exports;","/******/ \t}","","","/******/ \t// expose the modules object (__webpack_modules__)","/******/ \t__webpack_require__.m = modules;","","/******/ \t// expose the module cache","/******/ \t__webpack_require__.c = installedModules;","","/******/ \t// __webpack_public_path__","/******/ \t__webpack_require__.p = \"\";","","/******/ \t// Load entry module and return exports","/******/ \treturn __webpack_require__(0);","/******/ })","/************************************************************************/","/******/ ([","/* 0 */","/***/ function(module, exports, __webpack_require__) {","","\t/* globals window, console, 'Web' */","\t/* eslint no-unused-expressions: 0, no-console: 0, camelcase: 0, curly: 0 */","","\t__webpack_require__(1);","","\tvar crypto_obj = __webpack_require__(2);","\tvar CryptoJS = __webpack_require__(3);","\tvar packageJSON = __webpack_require__(4);","\tvar pubNubCore = __webpack_require__(5);","\tvar WS = __webpack_require__(8);","","\t/**","\t * UTIL LOCALS","\t */","","\tvar PNSDK = 'PubNub-JS-' + 'Web' + '/' + packageJSON.version;","","\t/**","\t * CONSOLE COMPATIBILITY","\t */","\twindow.console || (window.console = window.console || {});","\tconsole.log || (console.log = console.error = ((window.opera || {}).postError || function () {}));","","\t/**","\t * LOCAL STORAGE OR COOKIE","\t */","\tvar db = (function () {","\t  var store = {};","\t  var ls = false;","\t  try {","\t    ls = window['localStorage'];","\t  } catch (e) {","\t    return;","\t  }","\t  var cookieGet = function (key) {","\t    if (document.cookie.indexOf(key) === -1) return null;","\t    return ((document.cookie || '').match(","\t        RegExp(key + '=([^;]+)')","\t      ) || [])[1] || null;","\t  };","\t  var cookieSet = function (key, value) {","\t    document.cookie = key + '=' + value +","\t      '; expires=Thu, 1 Aug 2030 20:00:00 UTC; path=/';","\t  };","\t  var cookieTest = (function () {","\t    try {","\t      cookieSet('pnctest', '1');","\t      return cookieGet('pnctest') === '1';","\t    } catch (e) {","\t      return false;","\t    }","\t  }());","\t  return {","\t    get: function (key) {","\t      try {","\t        if (ls) return ls.getItem(key);","\t        if (cookieTest) return cookieGet(key);","\t        return store[key];","\t      } catch (e) {","\t        return store[key];","\t      }","\t    },","\t    set: function (key, value) {","\t      try {","\t        if (ls) return ls.setItem(key, value) && 0;","\t        if (cookieTest) cookieSet(key, value);","\t        store[key] = value;","\t      } catch (e) {","\t        store[key] = value;","\t      }","\t    }","\t  };","\t})();","","\tfunction get_hmac_SHA256(data, key) {","\t  var hash = CryptoJS['HmacSHA256'](data, key);","\t  return hash.toString(CryptoJS['enc']['Base64']);","\t}","","\t/**","\t * $","\t * =","\t * var div = $('divid');","\t */","\tfunction $(id) {","\t  return document.getElementById(id);","\t}","","\t/**","\t * ERROR","\t * =====","\t * error('message');","\t */","\tfunction error(message) {","\t  console['error'](message);","\t}","","\t/**","\t * SEARCH","\t * ======","\t * var elements = search('a div span');","\t */","\tfunction search(elements, start) {","\t  var list = [];","\t  pubNubCore.each(elements.split(/\\s+/), function (el) {","\t    pubNubCore.each((start || document).getElementsByTagName(el), function (node) {","\t      list.push(node);","\t    });","\t  });","\t  return list;","\t}","","\t/**","\t * BIND","\t * ====","\t * bind( 'keydown', search('a')[0], function(element) {","\t *     ...","\t * } );","\t */","\tfunction bind(type, el, fun) {","\t  pubNubCore.each(type.split(','), function (etype) {","\t    var rapfun = function (e) {","\t      if (!e) e = window.event;","\t      if (!fun(e)) {","\t        e.cancelBubble = true;","\t        e.preventDefault && e.preventDefault();","\t        e.stopPropagation && e.stopPropagation();","\t      }","\t    };","","\t    if (el.addEventListener) el.addEventListener(etype, rapfun, false);","\t    else if (el.attachEvent) el.attachEvent('on' + etype, rapfun);","\t    else el['on' + etype] = rapfun;","\t  });","\t}","","\t/**","\t * HEAD","\t * ====","\t * head().appendChild(elm);","\t */","\tfunction head() {","\t  return search('head')[0];","\t}","","\t/**","\t * ATTR","\t * ====","\t * var attribute = attr( node, 'attribute' );","\t */","\tfunction attr(node, attribute, value) {","\t  if (value) node.setAttribute(attribute, value);","\t  else return node && node.getAttribute && node.getAttribute(attribute);","\t}","","\t/**","\t * CSS","\t * ===","\t * var obj = create('div');","\t */","\tfunction css(element, styles) {","\t  for (var style in styles) if (styles.hasOwnProperty(style))","\t    try {","\t      element.style[style] = styles[style] + (","\t          '|width|height|top|left|'.indexOf(style) > 0 &&","\t          typeof styles[style] === 'number'","\t            ? 'px' : ''","\t        );","\t    } catch (e) {","\t      return;","\t    }","\t}","","\t/**","\t * CREATE","\t * ======","\t * var obj = create('div');","\t */","\tfunction create(element) {","\t  return document.createElement(element);","\t}","","","\t/**","\t * EVENTS","\t * ======","\t * PUBNUB.events.bind( 'you-stepped-on-flower', function(message) {","\t *     // Do Stuff with message","\t * } );","\t *","\t * PUBNUB.events.fire( 'you-stepped-on-flower', \"message-data\" );","\t * PUBNUB.events.fire( 'you-stepped-on-flower', {message:\"data\"} );","\t * PUBNUB.events.fire( 'you-stepped-on-flower', [1,2,3] );","\t *","\t */","\tvar events = {","\t  list: {},","\t  unbind: function (name) {","\t    events.list[name] = [];","\t  },","\t  bind: function (name, fun) {","\t    (events.list[name] = events.list[name] || []).push(fun);","\t  },","\t  fire: function (name, data) {","\t    pubNubCore.each(","\t      events.list[name] || [],","\t      function (fun) {","\t        fun(data);","\t      }","\t    );","\t  }","\t};","","\tfunction xdr(setup) {","\t  var xhr;","\t  var timer;","\t  var complete = 0;","\t  var loaded = 0;","\t  var async = true; /* do not allow sync operations in modern builds */","\t  var xhrtme = setup.timeout || pubNubCore.DEF_TIMEOUT;","\t  var data = setup.data || {};","\t  var fail = setup.fail || function () {};","\t  var success = setup.success || function () {};","","\t  var done = function (failed, response) {","\t    if (complete) return;","\t    complete = 1;","","\t    clearTimeout(timer);","","\t    if (xhr) {","\t      xhr.onerror = xhr.onload = null;","\t      if (xhr.abort) xhr.abort();","\t      xhr = null;","\t    }","","\t    if (failed) fail(response);","\t  };","","\t  var finished = function () {","\t    if (loaded) return;","\t    var response;","\t    loaded = 1;","","\t    clearTimeout(timer);","","\t    try {","\t      response = JSON.parse(xhr.responseText);","\t    } catch (r) {","\t      return done(1);","\t    }","","\t    success(response);","\t  };","","\t  timer = pubNubCore.timeout(function () {","\t    done(1);","\t  }, xhrtme);","","\t  // Send","\t  try {","\t    xhr = typeof XDomainRequest !== 'undefined' &&","\t      new XDomainRequest() ||","\t      new XMLHttpRequest();","","\t    xhr.onerror = xhr.onabort = function () {","\t      done(1, xhr.responseText || { error: 'Network Connection Error' });","\t    };","\t    xhr.onload = xhr.onloadend = finished;","","\t    data.pnsdk = PNSDK;","\t    var url = pubNubCore.build_url(setup.url, data);","\t    xhr.open('GET', url, async);","\t    if (async) xhr.timeout = xhrtme;","\t    xhr.send();","\t  } catch (eee) {","\t    done(1, { error: 'XHR Failed', stacktrace: eee });","\t  }","","\t  // Return 'done'","\t  return done;","\t}","","\t// Test Connection State","\tfunction _is_online() {","\t  if (!('onLine' in navigator)) return 1;","\t  try {","\t    return navigator['onLine'];","\t  } catch (e) {","\t    return true;","\t  }","\t}","","","\tfunction sendBeacon(url) {","\t  if (!('sendBeacon' in navigator)) return false;","","\t  return navigator['sendBeacon'](url);","\t}","","\t/* =-====================================================================-= */","\t/* =-====================================================================-= */","\t/* =-=========================     PUBNUB     ===========================-= */","\t/* =-====================================================================-= */","\t/* =-====================================================================-= */","","\tvar CREATE_PUBNUB = function (setup) {","\t  var leave_on_unload = setup['leave_on_unload'] || 0;","","\t  setup['xdr'] = xdr;","\t  setup['db'] = db;","\t  setup['error'] = setup['error'] || error;","\t  setup['_is_online'] = _is_online;","\t  setup['hmac_SHA256'] = get_hmac_SHA256;","\t  setup['crypto_obj'] = crypto_obj();","\t  setup['sendBeacon'] = sendBeacon;","\t  setup['params'] = { pnsdk: PNSDK };","","\t  var SELF = function (setup) {","\t    return CREATE_PUBNUB(setup);","\t  };","","\t  var PN = pubNubCore.PN_API(setup);","","\t  for (var prop in PN) {","\t    if (PN.hasOwnProperty(prop)) {","\t      SELF[prop] = PN[prop];","\t    }","\t  }","\t  SELF['css'] = css;","\t  SELF['$'] = $;","\t  SELF['create'] = create;","\t  SELF['bind'] = bind;","\t  SELF['head'] = head;","\t  SELF['search'] = search;","\t  SELF['attr'] = attr;","\t  SELF['events'] = events;","\t  SELF['init'] = SELF;","\t  SELF['secure'] = SELF;","\t  SELF['crypto_obj'] = crypto_obj(); // export to instance","\t  SELF['WS'] = WS;","\t  SELF['PNmessage'] = pubNubCore.PNmessage;","\t  SELF['supplant'] = pubNubCore.supplant;","","","\t  // Add Leave Functions","\t  bind('beforeunload', window, function () {","\t    if (leave_on_unload) SELF['each-channel'](function (ch) {","\t      SELF['LEAVE'](ch.name, 0);","\t    });","\t    return true;","\t  });","","\t  SELF.ready();","","\t  // Return without Testing","\t  if (setup['notest']) return SELF;","","\t  bind('offline', window, SELF['offline']);","\t  bind('offline', document, SELF['offline']);","","\t  // Return PUBNUB Socket Object","\t  return SELF;","\t};","","\tCREATE_PUBNUB.init = CREATE_PUBNUB;","\tCREATE_PUBNUB.secure = CREATE_PUBNUB;","\tCREATE_PUBNUB.crypto_obj = crypto_obj(); // export to constructor","\tCREATE_PUBNUB.WS = WS;","\tCREATE_PUBNUB.db = db;","\tCREATE_PUBNUB.PNmessage = pubNubCore.PNmessage;","\tCREATE_PUBNUB.uuid = pubNubCore.uuid;","","\tCREATE_PUBNUB.css = css;","\tCREATE_PUBNUB.$ = $;","\tCREATE_PUBNUB.create = $;","\tCREATE_PUBNUB.bind = bind;","\tCREATE_PUBNUB.head = head;","\tCREATE_PUBNUB.search = search;","\tCREATE_PUBNUB.attr = attr;","\tCREATE_PUBNUB.events = events;","","\tCREATE_PUBNUB.map = pubNubCore.map;","\tCREATE_PUBNUB.each = pubNubCore.each;","\tCREATE_PUBNUB.grep = pubNubCore.grep;","\tCREATE_PUBNUB.supplant = pubNubCore.supplant;","\tCREATE_PUBNUB.now = pubNubCore.now;","\tCREATE_PUBNUB.unique = pubNubCore.unique;","\tCREATE_PUBNUB.updater = pubNubCore.updater;","","","\t// jQuery Interface","\twindow['jQuery'] && (window['jQuery']['PUBNUB'] = CREATE_PUBNUB);","","\tmodule.exports = CREATE_PUBNUB;","","","/***/ },","/* 1 */","/***/ function(module, exports) {","","\t/*** IMPORTS FROM imports-loader ***/","\t(function() {","","\t/* =-====================================================================-= */","\t/* =-====================================================================-= */","\t/* =-=========================     JSON     =============================-= */","\t/* =-====================================================================-= */","\t/* =-====================================================================-= */","","\t(window['JSON'] && window['JSON']['stringify']) || (function () {","\t    window['JSON'] || (window['JSON'] = {});","","\t    function toJSON(key) {","\t        try      { return this.valueOf() }","\t        catch(e) { return null }","\t    }","","\t    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,","\t        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,","\t        gap,","\t        indent,","\t        meta = {    // table of character substitutions","\t            '\\b': '\\\\b',","\t            '\\t': '\\\\t',","\t            '\\n': '\\\\n',","\t            '\\f': '\\\\f',","\t            '\\r': '\\\\r',","\t            '\"' : '\\\\\"',","\t            '\\\\': '\\\\\\\\'","\t        },","\t        rep;","","\t    function quote(string) {","\t        escapable.lastIndex = 0;","\t        return escapable.test(string) ?","\t            '\"' + string.replace(escapable, function (a) {","\t                var c = meta[a];","\t                return typeof c === 'string' ? c :","\t                    '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);","\t            }) + '\"' :","\t            '\"' + string + '\"';","\t    }","","\t    function str(key, holder) {","\t        var i,          // The loop counter.","\t            k,          // The member key.","\t            v,          // The member value.","\t            length,","\t            partial,","\t            mind  = gap,","\t            value = holder[key];","","\t        if (value && typeof value === 'object') {","\t            value = toJSON.call( value, key );","\t        }","","\t        if (typeof rep === 'function') {","\t            value = rep.call(holder, key, value);","\t        }","","\t        switch (typeof value) {","\t        case 'string':","\t            return quote(value);","","\t        case 'number':","\t            return isFinite(value) ? String(value) : 'null';","","\t        case 'boolean':","\t        case 'null':","\t            return String(value);","","\t        case 'object':","","\t            if (!value) {","\t                return 'null';","\t            }","","\t            gap += indent;","\t            partial = [];","","\t            if (Object.prototype.toString.apply(value) === '[object Array]') {","","\t                length = value.length;","\t                for (i = 0; i < length; i += 1) {","\t                    partial[i] = str(i, value) || 'null';","\t                }","","\t                v = partial.length === 0 ? '[]' :","\t                    gap ? '[\\n' + gap +","\t                            partial.join(',\\n' + gap) + '\\n' +","\t                                mind + ']' :","\t                          '[' + partial.join(',') + ']';","\t                gap = mind;","\t                return v;","\t            }","\t            if (rep && typeof rep === 'object') {","\t                length = rep.length;","\t                for (i = 0; i < length; i += 1) {","\t                    k = rep[i];","\t                    if (typeof k === 'string') {","\t                        v = str(k, value);","\t                        if (v) {","\t                            partial.push(quote(k) + (gap ? ': ' : ':') + v);","\t                        }","\t                    }","\t                }","\t            } else {","\t                for (k in value) {","\t                    if (Object.hasOwnProperty.call(value, k)) {","\t                        v = str(k, value);","\t                        if (v) {","\t                            partial.push(quote(k) + (gap ? ': ' : ':') + v);","\t                        }","\t                    }","\t                }","\t            }","","\t            v = partial.length === 0 ? '{}' :","\t                gap ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' +","\t                        mind + '}' : '{' + partial.join(',') + '}';","\t            gap = mind;","\t            return v;","\t        }","\t    }","","\t    if (typeof JSON['stringify'] !== 'function') {","\t        JSON['stringify'] = function (value, replacer, space) {","\t            var i;","\t            gap = '';","\t            indent = '';","","\t            if (typeof space === 'number') {","\t                for (i = 0; i < space; i += 1) {","\t                    indent += ' ';","\t                }","\t            } else if (typeof space === 'string') {","\t                indent = space;","\t            }","\t            rep = replacer;","\t            if (replacer && typeof replacer !== 'function' &&","\t                    (typeof replacer !== 'object' ||","\t                     typeof replacer.length !== 'number')) {","\t                throw new Error('JSON.stringify');","\t            }","\t            return str('', {'': value});","\t        };","\t    }","","\t    if (typeof JSON['parse'] !== 'function') {","\t        // JSON is parsed on the server for security.","\t        JSON['parse'] = function (text) {return eval('('+text+')')};","\t    }","\t}());","","\t}.call(window));","","/***/ },","/* 2 */","/***/ function(module, exports, __webpack_require__) {","","\t/* eslint camelcase: 0 eqeqeq: 0 */","","\tvar CryptoJS = __webpack_require__(3);","","\tfunction crypto_obj() {","\t  function SHA256(s) {","\t    return CryptoJS['SHA256'](s)['toString'](CryptoJS['enc']['Hex']);","\t  }","","\t  var iv = '0123456789012345';","","\t  var allowedKeyEncodings = ['hex', 'utf8', 'base64', 'binary'];","\t  var allowedKeyLengths = [128, 256];","\t  var allowedModes = ['ecb', 'cbc'];","","\t  var defaultOptions = {","\t    encryptKey: true,","\t    keyEncoding: 'utf8',","\t    keyLength: 256,","\t    mode: 'cbc'","\t  };","","\t  function parse_options(options) {","\t    // Defaults","\t    options = options || {};","\t    if (!options['hasOwnProperty']('encryptKey')) options['encryptKey'] = defaultOptions['encryptKey'];","\t    if (!options['hasOwnProperty']('keyEncoding')) options['keyEncoding'] = defaultOptions['keyEncoding'];","\t    if (!options['hasOwnProperty']('keyLength')) options['keyLength'] = defaultOptions['keyLength'];","\t    if (!options['hasOwnProperty']('mode')) options['mode'] = defaultOptions['mode'];","","\t    // Validation","\t    if (allowedKeyEncodings['indexOf'](options['keyEncoding']['toLowerCase']()) == -1) options['keyEncoding'] = defaultOptions['keyEncoding'];","\t    if (allowedKeyLengths['indexOf'](parseInt(options['keyLength'], 10)) == -1) options['keyLength'] = defaultOptions['keyLength'];","\t    if (allowedModes['indexOf'](options['mode']['toLowerCase']()) == -1) options['mode'] = defaultOptions['mode'];","","\t    return options;","\t  }","","\t  function decode_key(key, options) {","\t    if (options['keyEncoding'] === 'base64') {","\t      return CryptoJS['enc']['Base64']['parse'](key);","\t    } else if (options['keyEncoding'] === 'hex') {","\t      return CryptoJS['enc']['Hex']['parse'](key);","\t    } else {","\t      return key;","\t    }","\t  }","","\t  function get_padded_key(key, options) {","\t    key = decode_key(key, options);","\t    if (options['encryptKey']) {","\t      return CryptoJS['enc']['Utf8']['parse'](SHA256(key)['slice'](0, 32));","\t    } else {","\t      return key;","\t    }","\t  }","","\t  function get_mode(options) {","\t    if (options['mode'] === 'ecb') {","\t      return CryptoJS['mode']['ECB'];","\t    } else {","\t      return CryptoJS['mode']['CBC'];","\t    }","\t  }","","\t  function get_iv(options) {","\t    return (options['mode'] === 'cbc') ? CryptoJS['enc']['Utf8']['parse'](iv) : null;","\t  }","","\t  return {","\t    encrypt: function (data, key, options) {","\t      if (!key) return data;","\t      options = parse_options(options);","\t      var iv = get_iv(options);","\t      var mode = get_mode(options);","\t      var cipher_key = get_padded_key(key, options);","\t      var hex_message = JSON['stringify'](data);","\t      var encryptedHexArray = CryptoJS['AES']['encrypt'](hex_message, cipher_key, { iv: iv, mode: mode })['ciphertext'];","\t      var base_64_encrypted = encryptedHexArray['toString'](CryptoJS['enc']['Base64']);","\t      return base_64_encrypted || data;","\t    },","","\t    decrypt: function (data, key, options) {","\t      if (!key) return data;","\t      options = parse_options(options);","\t      var iv = get_iv(options);","\t      var mode = get_mode(options);","\t      var cipher_key = get_padded_key(key, options);","\t      try {","\t        var binary_enc = CryptoJS['enc']['Base64']['parse'](data);","\t        var json_plain = CryptoJS['AES']['decrypt']({ ciphertext: binary_enc }, cipher_key, { iv: iv, mode: mode })['toString'](CryptoJS['enc']['Utf8']);","\t        var plaintext = JSON['parse'](json_plain);","\t        return plaintext;","\t      } catch (e) {","\t        return undefined;","\t      }","\t    }","\t  };","\t}","","\tmodule.exports = crypto_obj;","","","/***/ },","/* 3 */","/***/ function(module, exports) {","","\t/*","\t CryptoJS v3.1.2","\t code.google.com/p/crypto-js","\t (c) 2009-2013 by Jeff Mott. All rights reserved.","\t code.google.com/p/crypto-js/wiki/License","\t */","\tvar CryptoJS=CryptoJS||function(h,s){var f={},g=f.lib={},q=function(){},m=g.Base={extend:function(a){q.prototype=this;var c=new q;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},","\t    r=g.WordArray=m.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||k).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<","\t      32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=m.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new r.init(c,a)}}),l=f.enc={},k=l.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,","\t        2),16)<<24-4*(b%8);return new r.init(d,c/2)}},n=l.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join(\"\")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new r.init(d,c)}},j=l.Utf8={stringify:function(a){try{return decodeURIComponent(escape(n.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return n.parse(unescape(encodeURIComponent(a)))}},","\t    u=g.BufferedBlockAlgorithm=m.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=j.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var g=0;g<a;g+=e)this._doProcessBlock(d,g);g=d.splice(0,a);c.sigBytes-=b}return new r.init(g,b)},clone:function(){var a=m.clone.call(this);","\t      a._data=this._data.clone();return a},_minBufferSize:0});g.Hasher=u.extend({cfg:m.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){u.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new t.HMAC.init(a,","\t    d)).finalize(c)}}});var t=f.algo={};return f}(Math);","","\t// SHA256","\t(function(h){for(var s=CryptoJS,f=s.lib,g=f.WordArray,q=f.Hasher,f=s.algo,m=[],r=[],l=function(a){return 4294967296*(a-(a|0))|0},k=2,n=0;64>n;){var j;a:{j=k;for(var u=h.sqrt(j),t=2;t<=u;t++)if(!(j%t)){j=!1;break a}j=!0}j&&(8>n&&(m[n]=l(h.pow(k,0.5))),r[n]=l(h.pow(k,1/3)),n++);k++}var a=[],f=f.SHA256=q.extend({_doReset:function(){this._hash=new g.init(m.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],g=b[2],j=b[3],h=b[4],m=b[5],n=b[6],q=b[7],p=0;64>p;p++){if(16>p)a[p]=","\t  c[d+p]|0;else{var k=a[p-15],l=a[p-2];a[p]=((k<<25|k>>>7)^(k<<14|k>>>18)^k>>>3)+a[p-7]+((l<<15|l>>>17)^(l<<13|l>>>19)^l>>>10)+a[p-16]}k=q+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&m^~h&n)+r[p]+a[p];l=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&g^f&g);q=n;n=m;m=h;h=j+k|0;j=g;g=f;f=e;e=k+l|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+g|0;b[3]=b[3]+j|0;b[4]=b[4]+h|0;b[5]=b[5]+m|0;b[6]=b[6]+n|0;b[7]=b[7]+q|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;","\t  d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=q.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=q._createHelper(f);s.HmacSHA256=q._createHmacHelper(f)})(Math);","","\t// HMAC SHA256","\t(function(){var h=CryptoJS,s=h.enc.Utf8;h.algo.HMAC=h.lib.Base.extend({init:function(f,g){f=this._hasher=new f.init;\"string\"==typeof g&&(g=s.parse(g));var h=f.blockSize,m=4*h;g.sigBytes>m&&(g=f.finalize(g));g.clamp();for(var r=this._oKey=g.clone(),l=this._iKey=g.clone(),k=r.words,n=l.words,j=0;j<h;j++)k[j]^=1549556828,n[j]^=909522486;r.sigBytes=l.sigBytes=m;this.reset()},reset:function(){var f=this._hasher;f.reset();f.update(this._iKey)},update:function(f){this._hasher.update(f);return this},finalize:function(f){var g=","\t  this._hasher;f=g.finalize(f);g.reset();return g.finalize(this._oKey.clone().concat(f))}})})();","","\t// Base64","\t(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r<p;r+=3)for(var w=(l[r>>>2]>>>24-8*(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75*v<p;v++)d.push(t.charAt(w>>>6*(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join(\"\")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<","\tl;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"}})();","","\t// BlockCipher","\t(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<<j|b>>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<<j|b>>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<<j|b>>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<<j|b>>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},","\t  _doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),","\t    f=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,","\t      m,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,","\t      E,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/","\t    4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);","\t(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length<q;){n&&s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a<p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,","\t  l)}})();","","\t// Cipher","\tCryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},","\t  finalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return(\"string\"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return(\"string\"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d<b;d++)e[a+d]^=","\t  c[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,","\t  e,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n<c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,","\t  this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,","\t  1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},","\t  decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return\"string\"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,","\t  b.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();","","\t// AES","\t(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,","\t  16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j<a;j++)if(j<d)e[j]=c[j];else{var k=e[j-1];j%d?6<d&&4==j%d&&(k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d<a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4>d||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>","\t8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r<m;r++)var q=d[g>>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=","\t  d[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();","","\t// Mode ECB","\tCryptoJS.mode.ECB = (function () {","\t  var ECB = CryptoJS.lib.BlockCipherMode.extend();","","\t  ECB.Encryptor = ECB.extend({","\t    processBlock: function (words, offset) {","\t      this._cipher.encryptBlock(words, offset);","\t    }","\t  });","","\t  ECB.Decryptor = ECB.extend({","\t    processBlock: function (words, offset) {","\t      this._cipher.decryptBlock(words, offset);","\t    }","\t  });","","\t  return ECB;","\t}());","","\tmodule.exports = CryptoJS;","","","/***/ },","/* 4 */","/***/ function(module, exports) {","","\tmodule.exports = {","\t\t\"name\": \"pubnub\",","\t\t\"preferGlobal\": false,","\t\t\"version\": \"3.14.5\",","\t\t\"author\": \"PubNub <support@pubnub.com>\",","\t\t\"description\": \"Publish & Subscribe Real-time Messaging with PubNub\",","\t\t\"contributors\": [","\t\t\t{","\t\t\t\t\"name\": \"Stephen Blum\",","\t\t\t\t\"email\": \"stephen@pubnub.com\"","\t\t\t}","\t\t],","\t\t\"bin\": {},","\t\t\"scripts\": {","\t\t\t\"test\": \"grunt test --force\"","\t\t},","\t\t\"main\": \"./node.js/pubnub.js\",","\t\t\"browser\": \"./modern/dist/pubnub.js\",","\t\t\"repository\": {","\t\t\t\"type\": \"git\",","\t\t\t\"url\": \"git://github.com/pubnub/javascript.git\"","\t\t},","\t\t\"keywords\": [","\t\t\t\"cloud\",","\t\t\t\"publish\",","\t\t\t\"subscribe\",","\t\t\t\"websockets\",","\t\t\t\"comet\",","\t\t\t\"bosh\",","\t\t\t\"xmpp\",","\t\t\t\"real-time\",","\t\t\t\"messaging\"","\t\t],","\t\t\"dependencies\": {","\t\t\t\"agentkeepalive\": \"~0.2\",","\t\t\t\"lodash\": \"^4.1.0\"","\t\t},","\t\t\"noAnalyze\": false,","\t\t\"devDependencies\": {","\t\t\t\"chai\": \"^3.5.0\",","\t\t\t\"eslint\": \"2.4.0\",","\t\t\t\"eslint-config-airbnb\": \"^6.0.2\",","\t\t\t\"eslint-plugin-flowtype\": \"^2.1.0\",","\t\t\t\"eslint-plugin-mocha\": \"^2.0.0\",","\t\t\t\"eslint-plugin-react\": \"^4.1.0\",","\t\t\t\"flow-bin\": \"^0.22.0\",","\t\t\t\"grunt\": \"^0.4.5\",","\t\t\t\"grunt-contrib-clean\": \"^1.0.0\",","\t\t\t\"grunt-contrib-copy\": \"^0.8.2\",","\t\t\t\"grunt-contrib-uglify\": \"^0.11.1\",","\t\t\t\"grunt-env\": \"^0.4.4\",","\t\t\t\"grunt-eslint\": \"^18.0.0\",","\t\t\t\"grunt-flow\": \"^1.0.3\",","\t\t\t\"grunt-karma\": \"^0.12.1\",","\t\t\t\"grunt-mocha-istanbul\": \"^3.0.1\",","\t\t\t\"grunt-text-replace\": \"^0.4.0\",","\t\t\t\"grunt-webpack\": \"^1.0.11\",","\t\t\t\"imports-loader\": \"^0.6.5\",","\t\t\t\"isparta\": \"^4.0.0\",","\t\t\t\"json-loader\": \"^0.5.4\",","\t\t\t\"karma\": \"^0.13.21\",","\t\t\t\"karma-chai\": \"^0.1.0\",","\t\t\t\"karma-mocha\": \"^0.2.1\",","\t\t\t\"karma-phantomjs-launcher\": \"^1.0.0\",","\t\t\t\"karma-spec-reporter\": \"0.0.24\",","\t\t\t\"load-grunt-tasks\": \"^3.4.0\",","\t\t\t\"mocha\": \"^2.4.5\",","\t\t\t\"nock\": \"^1.1.0\",","\t\t\t\"node-uuid\": \"^1.4.7\",","\t\t\t\"nodeunit\": \"^0.9.0\",","\t\t\t\"phantomjs-prebuilt\": \"^2.1.4\",","\t\t\t\"proxyquire\": \"^1.7.4\",","\t\t\t\"sinon\": \"^1.17.2\",","\t\t\t\"uglify-js\": \"^2.6.1\",","\t\t\t\"underscore\": \"^1.7.0\",","\t\t\t\"webpack\": \"^1.12.13\",","\t\t\t\"webpack-dev-server\": \"^1.14.1\"","\t\t},","\t\t\"bundleDependencies\": [],","\t\t\"license\": \"MIT\",","\t\t\"engine\": {","\t\t\t\"node\": \">=0.8\"","\t\t},","\t\t\"files\": [","\t\t\t\"core\",","\t\t\t\"node.js\",","\t\t\t\"modern\",","\t\t\t\"CHANGELOG\",","\t\t\t\"FUTURE.md\",","\t\t\t\"LICENSE\",","\t\t\t\"README.md\"","\t\t]","\t};","","/***/ },","/* 5 */","/***/ function(module, exports, __webpack_require__) {","","\t/* eslint camelcase: 0, no-use-before-define: 0, no-unused-expressions: 0  */","\t/* eslint eqeqeq: 0, one-var: 0 */","\t/* eslint no-redeclare: 0 */","\t/* eslint guard-for-in: 0 */","\t/* eslint block-scoped-var: 0 space-return-throw-case: 0, no-unused-vars: 0 */","","\tvar packageJSON = __webpack_require__(4);","\tvar defaultConfiguration = __webpack_require__(6);","\tvar utils = __webpack_require__(7);","","\tvar NOW = 1;","\tvar READY = false;","\tvar READY_BUFFER = [];","\tvar PRESENCE_SUFFIX = '-pnpres';","\tvar DEF_WINDOWING = 10; // MILLISECONDS.","\tvar DEF_TIMEOUT = 15000; // MILLISECONDS.","\tvar DEF_SUB_TIMEOUT = 310; // SECONDS.","\tvar DEF_KEEPALIVE = 60; // SECONDS (FOR TIMESYNC).","\tvar SECOND = 1000; // A THOUSAND MILLISECONDS.","\tvar PRESENCE_HB_THRESHOLD = 5;","\tvar PRESENCE_HB_DEFAULT = 30;","\tvar SDK_VER = packageJSON.version;","","\t/**","\t * UTILITIES","\t */","\tfunction unique() {","\t  return 'x' + ++NOW + '' + (+new Date);","\t}","","\t/**","\t * NEXTORIGIN","\t * ==========","\t * var next_origin = nextorigin();","\t */","\tvar nextorigin = (function () {","\t  var max = 20;","\t  var ori = Math.floor(Math.random() * max);","\t  return function (origin, failover) {","\t    return origin.indexOf('pubsub.') > 0","\t      && origin.replace(","\t        'pubsub', 'ps' + (","\t          failover ? utils.generateUUID().split('-')[0] :","\t            (++ori < max ? ori : ori = 1)","\t        )) || origin;","\t  };","\t})();","","","\t/**","\t * Generate Subscription Channel List","\t * ==================================","\t * generate_channel_list(channels_object);","\t */","\tfunction generate_channel_list(channels, nopresence) {","\t  var list = [];","\t  utils.each(channels, function (channel, status) {","\t    if (nopresence) {","\t      if (channel.search('-pnpres') < 0) {","\t        if (status.subscribed) list.push(channel);","\t      }","\t    } else {","\t      if (status.subscribed) list.push(channel);","\t    }","\t  });","\t  return list.sort();","\t}","","\t/**","\t * Generate Subscription Channel Groups List","\t * ==================================","\t * generate_channel_group_list(channels_groups object);","\t */","\tfunction generate_channel_group_list(channel_groups, nopresence) {","\t  var list = [];","\t  utils.each(channel_groups, function (channel_group, status) {","\t    if (nopresence) {","\t      if (channel_group.search('-pnpres') < 0) {","\t        if (status.subscribed) list.push(channel_group);","\t      }","\t    } else {","\t      if (status.subscribed) list.push(channel_group);","\t    }","\t  });","\t  return list.sort();","\t}","","\t// PUBNUB READY TO CONNECT","\tfunction ready() {","\t  if (READY) return;","\t  READY = 1;","\t  utils.each(READY_BUFFER, function (connect) {","\t    connect();","\t  });","\t}","","\tfunction PNmessage(args) {","\t  var msg = args || { apns: {} };","","\t  msg['getPubnubMessage'] = function () {","\t    var m = {};","","\t    if (Object.keys(msg['apns']).length) {","\t      m['pn_apns'] = {","\t        aps: {","\t          alert: msg['apns']['alert'],","\t          badge: msg['apns']['badge']","\t        }","\t      };","\t      for (var k in msg['apns']) {","\t        m['pn_apns'][k] = msg['apns'][k];","\t      }","\t      var exclude1 = ['badge', 'alert'];","\t      for (var k in exclude1) {","\t        delete m['pn_apns'][exclude1[k]];","\t      }","\t    }","","\t    if (msg['gcm']) {","\t      m['pn_gcm'] = {","\t        data: msg['gcm']","\t      };","\t    }","","\t    for (var k in msg) {","\t      m[k] = msg[k];","\t    }","\t    var exclude = ['apns', 'gcm', 'publish', 'channel', 'callback', 'error'];","\t    for (var k in exclude) {","\t      delete m[exclude[k]];","\t    }","","\t    return m;","\t  };","\t  msg['publish'] = function () {","\t    var m = msg.getPubnubMessage();","","\t    if (msg['pubnub'] && msg['channel']) {","\t      msg['pubnub'].publish({","\t        message: m,","\t        channel: msg['channel'],","\t        callback: msg['callback'],","\t        error: msg['error']","\t      });","\t    }","\t  };","\t  return msg;","\t}","","\tfunction PN_API(setup) {","\t  var SUB_WINDOWING = +setup['windowing'] || DEF_WINDOWING;","\t  var SUB_TIMEOUT = (+setup['timeout'] || DEF_SUB_TIMEOUT) * SECOND;","\t  var KEEPALIVE = (+setup['keepalive'] || DEF_KEEPALIVE) * SECOND;","\t  var TIME_CHECK = setup['timecheck'] || 0;","\t  var NOLEAVE = setup['noleave'] || 0;","\t  var PUBLISH_KEY = setup['publish_key'];","\t  var SUBSCRIBE_KEY = setup['subscribe_key'];","\t  var AUTH_KEY = setup['auth_key'] || '';","\t  var SECRET_KEY = setup['secret_key'] || '';","\t  var hmac_SHA256 = setup['hmac_SHA256'];","\t  var SSL = setup['ssl'] ? 's' : '';","\t  var ORIGIN = 'http' + SSL + '://' + (setup['origin'] || 'pubsub.pubnub.com');","\t  var STD_ORIGIN = nextorigin(ORIGIN);","\t  var SUB_ORIGIN = nextorigin(ORIGIN);","\t  var CONNECT = function () {","\t  };","\t  var PUB_QUEUE = [];","\t  var CLOAK = true;","\t  var TIME_DRIFT = 0;","\t  var SUB_CALLBACK = 0;","\t  var SUB_CHANNEL = 0;","\t  var SUB_RECEIVER = 0;","\t  var SUB_RESTORE = setup['restore'] || 0;","\t  var SUB_BUFF_WAIT = 0;","\t  var TIMETOKEN = 0;","\t  var RESUMED = false;","\t  var CHANNELS = {};","\t  var CHANNEL_GROUPS = {};","\t  var SUB_ERROR = function () {","\t  };","\t  var STATE = {};","\t  var PRESENCE_HB_TIMEOUT = null;","\t  var PRESENCE_HB = validate_presence_heartbeat(","\t    setup['heartbeat'] || setup['pnexpires'] || 0, setup['error']","\t  );","\t  var PRESENCE_HB_INTERVAL = setup['heartbeat_interval'] || (PRESENCE_HB / 2) - 1;","\t  var PRESENCE_HB_RUNNING = false;","\t  var NO_WAIT_FOR_PENDING = setup['no_wait_for_pending'];","\t  var COMPATIBLE_35 = setup['compatible_3.5'] || false;","\t  var xdr = setup['xdr'];","\t  var params = setup['params'] || {};","\t  var error = setup['error'] || function () {};","\t  var _is_online = setup['_is_online'] || function () { return 1;};","\t  var jsonp_cb = setup['jsonp_cb'] || function () { return 0; };","\t  var db = setup['db'] || { get: function () {}, set: function () {} };","\t  var CIPHER_KEY = setup['cipher_key'];","\t  var UUID = setup['uuid'] || (!setup['unique_uuid'] && db && db['get'](SUBSCRIBE_KEY + 'uuid') || '');","\t  var USE_INSTANCEID = setup['instance_id'] || false;","\t  var INSTANCEID = '';","\t  var shutdown = setup['shutdown'];","\t  var use_send_beacon = (typeof setup['use_send_beacon'] != 'undefined') ? setup['use_send_beacon'] : true;","\t  var sendBeacon = (use_send_beacon) ? setup['sendBeacon'] : null;","\t  var _poll_timer;","\t  var _poll_timer2;","","\t  if (PRESENCE_HB === 2) PRESENCE_HB_INTERVAL = 1;","","\t  var crypto_obj = setup['crypto_obj'] || {","\t    encrypt: function (a, key) {","\t      return a;","\t    },","\t    decrypt: function (b, key) {","\t      return b;","\t    }","\t  };","","\t  function _get_url_params(data) {","\t    if (!data) data = {};","\t    utils.each(params, function (key, value) {","\t      if (!(key in data)) data[key] = value;","\t    });","\t    return data;","\t  }","","\t  function _object_to_key_list(o) {","\t    var l = [];","\t    utils.each(o, function (key, value) {","\t      l.push(key);","\t    });","\t    return l;","\t  }","","\t  function _object_to_key_list_sorted(o) {","\t    return _object_to_key_list(o).sort();","\t  }","","\t  function _get_pam_sign_input_from_params(params) {","\t    var si = '';","\t    var l = _object_to_key_list_sorted(params);","","\t    for (var i in l) {","\t      var k = l[i];","\t      si += k + '=' + utils.pamEncode(params[k]);","\t      if (i != l.length - 1) si += '&';","\t    }","\t    return si;","\t  }","","\t  function validate_presence_heartbeat(heartbeat, cur_heartbeat, error) {","\t    var err = false;","","\t    if (typeof heartbeat === 'undefined') {","\t      return cur_heartbeat;","\t    }","","\t    if (typeof heartbeat === 'number') {","\t      if (heartbeat > PRESENCE_HB_THRESHOLD || heartbeat == 0) {","\t        err = false;","\t      } else {","\t        err = true;","\t      }","\t    } else if (typeof heartbeat === 'boolean') {","\t      if (!heartbeat) {","\t        return 0;","\t      } else {","\t        return PRESENCE_HB_DEFAULT;","\t      }","\t    } else {","\t      err = true;","\t    }","","\t    if (err) {","\t      error && error('Presence Heartbeat value invalid. Valid range ( x > ' + PRESENCE_HB_THRESHOLD + ' or x = 0). Current Value : ' + (cur_heartbeat || PRESENCE_HB_THRESHOLD));","\t      return cur_heartbeat || PRESENCE_HB_THRESHOLD;","\t    } else return heartbeat;","\t  }","","\t  function encrypt(input, key) {","\t    return crypto_obj['encrypt'](input, key || CIPHER_KEY) || input;","\t  }","","\t  function decrypt(input, key) {","\t    return crypto_obj['decrypt'](input, key || CIPHER_KEY) ||","\t      crypto_obj['decrypt'](input, CIPHER_KEY) ||","\t      input;","\t  }","","\t  function error_common(message, callback) {","\t    callback && callback({ error: message || 'error occurred' });","\t    error && error(message);","\t  }","","\t  function _presence_heartbeat() {","\t    clearTimeout(PRESENCE_HB_TIMEOUT);","","\t    if (!PRESENCE_HB_INTERVAL || PRESENCE_HB_INTERVAL >= 500 ||","\t      PRESENCE_HB_INTERVAL < 1 ||","\t      (!generate_channel_list(CHANNELS, true).length && !generate_channel_group_list(CHANNEL_GROUPS, true).length)) {","\t      PRESENCE_HB_RUNNING = false;","\t      return;","\t    }","","\t    PRESENCE_HB_RUNNING = true;","\t    SELF['presence_heartbeat']({","\t      callback: function (r) {","\t        PRESENCE_HB_TIMEOUT = utils.timeout(_presence_heartbeat, (PRESENCE_HB_INTERVAL) * SECOND);","\t      },","\t      error: function (e) {","\t        error && error('Presence Heartbeat unable to reach Pubnub servers.' + JSON.stringify(e));","\t        PRESENCE_HB_TIMEOUT = utils.timeout(_presence_heartbeat, (PRESENCE_HB_INTERVAL) * SECOND);","\t      }","\t    });","\t  }","","\t  function start_presence_heartbeat() {","\t    !PRESENCE_HB_RUNNING && _presence_heartbeat();","\t  }","","\t  function publish(next) {","\t    if (NO_WAIT_FOR_PENDING) {","\t      if (!PUB_QUEUE.length) return;","\t    } else {","\t      if (next) PUB_QUEUE.sending = 0;","\t      if (PUB_QUEUE.sending || !PUB_QUEUE.length) return;","\t      PUB_QUEUE.sending = 1;","\t    }","","\t    xdr(PUB_QUEUE.shift());","\t  }","","\t  function each_channel_group(callback) {","\t    var count = 0;","","\t    utils.each(generate_channel_group_list(CHANNEL_GROUPS), function (channel_group) {","\t      var chang = CHANNEL_GROUPS[channel_group];","","\t      if (!chang) return;","","\t      count++;","\t      (callback || function () {","\t      })(chang);","\t    });","","\t    return count;","\t  }","","\t  function each_channel(callback) {","\t    var count = 0;","","\t    utils.each(generate_channel_list(CHANNELS), function (channel) {","\t      var chan = CHANNELS[channel];","","\t      if (!chan) return;","","\t      count++;","\t      (callback || function () {","\t      })(chan);","\t    });","","\t    return count;","\t  }","","\t  function _invoke_callback(response, callback, err) {","\t    if (typeof response == 'object') {","\t      if (response['error']) {","\t        var callback_data = {};","","\t        if (response['message']) {","\t          callback_data['message'] = response['message'];","\t        }","","\t        if (response['payload']) {","\t          callback_data['payload'] = response['payload'];","\t        }","","\t        err && err(callback_data);","\t        return;","\t      }","\t      if (response['payload']) {","\t        if (response['next_page']) {","\t          callback && callback(response['payload'], response['next_page']);","\t        } else {","\t          callback && callback(response['payload']);","\t        }","\t        return;","\t      }","\t    }","\t    callback && callback(response);","\t  }","","\t  function _invoke_error(response, err) {","\t    if (typeof response == 'object' && response['error']) {","\t      var callback_data = {};","","\t      if (response['message']) {","\t        callback_data['message'] = response['message'];","\t      }","","\t      if (response['payload']) {","\t        callback_data['payload'] = response['payload'];","\t      }","","\t      err && err(callback_data);","\t      return;","\t    } else {","\t      err && err(response);","\t    }","\t  }","","\t  function CR(args, callback, url1, data) {","\t    var callback = args['callback'] || callback;","\t    var err = args['error'] || error;","\t    var jsonp = jsonp_cb();","","\t    data = data || {};","","\t    if (!data['auth']) {","\t      data['auth'] = args['auth_key'] || AUTH_KEY;","\t    }","","\t    var url = [","\t      STD_ORIGIN, 'v1', 'channel-registration',","\t      'sub-key', SUBSCRIBE_KEY","\t    ];","","\t    url.push.apply(url, url1);","","\t    if (jsonp) data['callback'] = jsonp;","","\t    xdr({","\t      callback: jsonp,","\t      data: _get_url_params(data),","\t      success: function (response) {","\t        _invoke_callback(response, callback, err);","\t      },","\t      fail: function (response) {","\t        _invoke_error(response, err);","\t      },","\t      url: url","\t    });","\t  }","","\t  // Announce Leave Event","\t  var SELF = {","\t    LEAVE: function (channel, blocking, auth_key, callback, error) {","\t      var data = { uuid: UUID, auth: auth_key || AUTH_KEY };","\t      var origin = nextorigin(ORIGIN);","\t      var callback = callback || function () {};","\t      var err = error || function () {};","\t      var url;","\t      var params;","\t      var jsonp = jsonp_cb();","","\t      // Prevent Leaving a Presence Channel","\t      if (channel.indexOf(PRESENCE_SUFFIX) > 0) return true;","","","\t      if (COMPATIBLE_35) {","\t        if (!SSL) return false;","\t        if (jsonp == '0') return false;","\t      }","","\t      if (NOLEAVE) return false;","","\t      if (jsonp != '0') data['callback'] = jsonp;","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      url = [","\t        origin, 'v2', 'presence', 'sub_key',","\t        SUBSCRIBE_KEY, 'channel', utils.encode(channel), 'leave'","\t      ];","","\t      params = _get_url_params(data);","","","\t      if (sendBeacon) {","\t        var url_string = utils.buildURL(url, params);","\t        if (sendBeacon(url_string)) {","\t          callback && callback({ status: 200, action: 'leave', message: 'OK', service: 'Presence' });","\t          return true;","\t        }","\t      }","","","\t      xdr({","\t        blocking: blocking || SSL,","\t        callback: jsonp,","\t        data: params,","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: url","\t      });","\t      return true;","\t    },","","\t    LEAVE_GROUP: function (channel_group, blocking, auth_key, callback, error) {","\t      var data = { uuid: UUID, auth: auth_key || AUTH_KEY };","\t      var origin = nextorigin(ORIGIN);","\t      var url;","\t      var params;","\t      var callback = callback || function () {};","\t      var err = error || function () {};","\t      var jsonp = jsonp_cb();","","\t      // Prevent Leaving a Presence Channel Group","\t      if (channel_group.indexOf(PRESENCE_SUFFIX) > 0) return true;","","\t      if (COMPATIBLE_35) {","\t        if (!SSL) return false;","\t        if (jsonp == '0') return false;","\t      }","","\t      if (NOLEAVE) return false;","","\t      if (jsonp != '0') data['callback'] = jsonp;","","\t      if (channel_group && channel_group.length > 0) data['channel-group'] = channel_group;","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      url = [","\t        origin, 'v2', 'presence', 'sub_key',","\t        SUBSCRIBE_KEY, 'channel', utils.encode(','), 'leave'","\t      ];","","\t      params = _get_url_params(data);","","\t      if (sendBeacon) {","\t        var url_string = utils.buildURL(url, params);","\t        if (sendBeacon(url_string)) {","\t          callback && callback({ status: 200, action: 'leave', message: 'OK', service: 'Presence' });","\t          return true;","\t        }","\t      }","","\t      xdr({","\t        blocking: blocking || SSL,","\t        callback: jsonp,","\t        data: params,","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: url","\t      });","\t      return true;","\t    },","","\t    set_resumed: function (resumed) {","\t      RESUMED = resumed;","\t    },","","\t    get_cipher_key: function () {","\t      return CIPHER_KEY;","\t    },","","\t    set_cipher_key: function (key) {","\t      CIPHER_KEY = key;","\t    },","","\t    raw_encrypt: function (input, key) {","\t      return encrypt(input, key);","\t    },","","\t    raw_decrypt: function (input, key) {","\t      return decrypt(input, key);","\t    },","","\t    get_heartbeat: function () {","\t      return PRESENCE_HB;","\t    },","","\t    set_heartbeat: function (heartbeat, heartbeat_interval) {","\t      PRESENCE_HB = validate_presence_heartbeat(heartbeat, PRESENCE_HB, error);","\t      PRESENCE_HB_INTERVAL = heartbeat_interval || (PRESENCE_HB / 2) - 1;","\t      if (PRESENCE_HB == 2) {","\t        PRESENCE_HB_INTERVAL = 1;","\t      }","\t      CONNECT();","\t      _presence_heartbeat();","\t    },","","\t    get_heartbeat_interval: function () {","\t      return PRESENCE_HB_INTERVAL;","\t    },","","\t    set_heartbeat_interval: function (heartbeat_interval) {","\t      PRESENCE_HB_INTERVAL = heartbeat_interval;","\t      _presence_heartbeat();","\t    },","","\t    get_version: function () {","\t      return SDK_VER;","\t    },","","\t    getGcmMessageObject: function (obj) {","\t      return {","\t        data: obj","\t      };","\t    },","","\t    getApnsMessageObject: function (obj) {","\t      var x = {","\t        aps: { badge: 1, alert: '' }","\t      };","\t      for (var k in obj) {","\t        k[x] = obj[k];","\t      }","\t      return x;","\t    },","","\t    _add_param: function (key, val) {","\t      params[key] = val;","\t    },","","\t    channel_group: function (args, callback) {","\t      var ns_ch = args['channel_group'];","\t      var callback = callback || args['callback'];","\t      var channels = args['channels'] || args['channel'];","\t      var cloak = args['cloak'];","\t      var namespace;","\t      var channel_group;","\t      var url = [];","\t      var data = {};","\t      var mode = args['mode'] || 'add';","","","\t      if (ns_ch) {","\t        var ns_ch_a = ns_ch.split(':');","","\t        if (ns_ch_a.length > 1) {","\t          namespace = (ns_ch_a[0] === '*') ? null : ns_ch_a[0];","","\t          channel_group = ns_ch_a[1];","\t        } else {","\t          channel_group = ns_ch_a[0];","\t        }","\t      }","","\t      namespace && url.push('namespace') && url.push(utils.encode(namespace));","","\t      url.push('channel-group');","","\t      if (channel_group && channel_group !== '*') {","\t        url.push(channel_group);","\t      }","","\t      if (channels) {","\t        if (utils.isArray(channels)) {","\t          channels = channels.join(',');","\t        }","\t        data[mode] = channels;","\t        data['cloak'] = (CLOAK) ? 'true' : 'false';","\t      } else {","\t        if (mode === 'remove') url.push('remove');","\t      }","","\t      if (typeof cloak != 'undefined') data['cloak'] = (cloak) ? 'true' : 'false';","","\t      CR(args, callback, url, data);","\t    },","","\t    channel_group_list_groups: function (args, callback) {","\t      var namespace;","","\t      namespace = args['namespace'] || args['ns'] || args['channel_group'] || null;","\t      if (namespace) {","\t        args['channel_group'] = namespace + ':*';","\t      }","","\t      SELF['channel_group'](args, callback);","\t    },","","\t    channel_group_list_channels: function (args, callback) {","\t      if (!args['channel_group']) return error('Missing Channel Group');","\t      SELF['channel_group'](args, callback);","\t    },","","\t    channel_group_remove_channel: function (args, callback) {","\t      if (!args['channel_group']) return error('Missing Channel Group');","\t      if (!args['channel'] && !args['channels']) return error('Missing Channel');","","\t      args['mode'] = 'remove';","\t      SELF['channel_group'](args, callback);","\t    },","","\t    channel_group_remove_group: function (args, callback) {","\t      if (!args['channel_group']) return error('Missing Channel Group');","\t      if (args['channel']) return error('Use channel_group_remove_channel if you want to remove a channel from a group.');","","\t      args['mode'] = 'remove';","\t      SELF['channel_group'](args, callback);","\t    },","","\t    channel_group_add_channel: function (args, callback) {","\t      if (!args['channel_group']) return error('Missing Channel Group');","\t      if (!args['channel'] && !args['channels']) return error('Missing Channel');","\t      SELF['channel_group'](args, callback);","\t    },","","\t    channel_group_cloak: function (args, callback) {","\t      if (typeof args['cloak'] == 'undefined') {","\t        callback(CLOAK);","\t        return;","\t      }","\t      CLOAK = args['cloak'];","\t      SELF['channel_group'](args, callback);","\t    },","","\t    channel_group_list_namespaces: function (args, callback) {","\t      var url = ['namespace'];","\t      CR(args, callback, url);","\t    },","","\t    channel_group_remove_namespace: function (args, callback) {","\t      var url = ['namespace', args['namespace'], 'remove'];","\t      CR(args, callback, url);","\t    },","","\t    /*","\t     PUBNUB.history({","\t     channel  : 'my_chat_channel',","\t     limit    : 100,","\t     callback : function(history) { }","\t     });","\t     */","\t    history: function (args, callback) {","\t      var callback = args['callback'] || callback;","\t      var count = args['count'] || args['limit'] || 100;","\t      var reverse = args['reverse'] || 'false';","\t      var err = args['error'] || function () {};","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var cipher_key = args['cipher_key'];","\t      var channel = args['channel'];","\t      var channel_group = args['channel_group'];","\t      var start = args['start'];","\t      var end = args['end'];","\t      var include_token = args['include_token'];","\t      var string_msg_token = args['string_message_token'] || false;","\t      var params = {};","\t      var jsonp = jsonp_cb();","","\t      // Make sure we have a Channel","\t      if (!channel && !channel_group) return error('Missing Channel');","\t      if (!callback) return error('Missing Callback');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      params['stringtoken'] = 'true';","\t      params['count'] = count;","\t      params['reverse'] = reverse;","\t      params['auth'] = auth_key;","","\t      if (channel_group) {","\t        params['channel-group'] = channel_group;","\t        if (!channel) {","\t          channel = ',';","\t        }","\t      }","\t      if (jsonp) params['callback'] = jsonp;","\t      if (start) params['start'] = start;","\t      if (end) params['end'] = end;","\t      if (include_token) params['include_token'] = 'true';","\t      if (string_msg_token) params['string_message_token'] = 'true';","","\t      // Send Message","\t      xdr({","\t        callback: jsonp,","\t        data: _get_url_params(params),","\t        success: function (response) {","\t          if (typeof response == 'object' && response['error']) {","\t            err({ message: response['message'], payload: response['payload'] });","\t            return;","\t          }","\t          var messages = response[0];","\t          var decrypted_messages = [];","\t          for (var a = 0; a < messages.length; a++) {","\t            if (include_token) {","\t              var new_message = decrypt(messages[a]['message'], cipher_key);","\t              var timetoken = messages[a]['timetoken'];","\t              try {","\t                decrypted_messages['push']({ message: JSON['parse'](new_message), timetoken: timetoken });","\t              } catch (e) {","\t                decrypted_messages['push'](({ message: new_message, timetoken: timetoken }));","\t              }","\t            } else {","\t              var new_message = decrypt(messages[a], cipher_key);","\t              try {","\t                decrypted_messages['push'](JSON['parse'](new_message));","\t              } catch (e) {","\t                decrypted_messages['push']((new_message));","\t              }","\t            }","\t          }","\t          callback([decrypted_messages, response[1], response[2]]);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: [","\t          STD_ORIGIN, 'v2', 'history', 'sub-key',","\t          SUBSCRIBE_KEY, 'channel', utils.encode(channel)","\t        ]","\t      });","\t    },","","\t    /*","\t     PUBNUB.replay({","\t     source      : 'my_channel',","\t     destination : 'new_channel'","\t     });","\t     */","\t    replay: function (args, callback) {","\t      var callback = callback || args['callback'] || function () {};","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var source = args['source'];","\t      var destination = args['destination'];","\t      var err = args['error'] || args['error'] || function () {};","\t      var stop = args['stop'];","\t      var start = args['start'];","\t      var end = args['end'];","\t      var reverse = args['reverse'];","\t      var limit = args['limit'];","\t      var jsonp = jsonp_cb();","\t      var data = {};","\t      var url;","","\t      // Check User Input","\t      if (!source) return error('Missing Source Channel');","\t      if (!destination) return error('Missing Destination Channel');","\t      if (!PUBLISH_KEY) return error('Missing Publish Key');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      // Setup URL Params","\t      if (jsonp != '0') data['callback'] = jsonp;","\t      if (stop) data['stop'] = 'all';","\t      if (reverse) data['reverse'] = 'true';","\t      if (start) data['start'] = start;","\t      if (end) data['end'] = end;","\t      if (limit) data['count'] = limit;","","\t      data['auth'] = auth_key;","","\t      // Compose URL Parts","\t      url = [","\t        STD_ORIGIN, 'v1', 'replay',","\t        PUBLISH_KEY, SUBSCRIBE_KEY,","\t        source, destination","\t      ];","","\t      // Start (or Stop) Replay!","\t      xdr({","\t        callback: jsonp,","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function () {","\t          callback([0, 'Disconnected']);","\t        },","\t        url: url,","\t        data: _get_url_params(data)","\t      });","\t    },","","\t    /*","\t     PUBNUB.auth('AJFLKAJSDKLA');","\t     */","\t    auth: function (auth) {","\t      AUTH_KEY = auth;","\t      CONNECT();","\t    },","","\t    /*","\t     PUBNUB.time(function(time){ });","\t     */","\t    time: function (callback) {","\t      var jsonp = jsonp_cb();","","\t      var data = { uuid: UUID, auth: AUTH_KEY };","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      xdr({","\t        callback: jsonp,","\t        data: _get_url_params(data),","\t        url: [STD_ORIGIN, 'time', jsonp],","\t        success: function (response) {","\t          callback(response[0]);","\t        },","\t        fail: function () {","\t          callback(0);","\t        }","\t      });","\t    },","","\t    /*","\t     PUBNUB.publish({","\t     channel : 'my_chat_channel',","\t     message : 'hello!'","\t     });","\t     */","\t    publish: function (args, callback) {","\t      var msg = args['message'];","\t      if (!msg) return error('Missing Message');","","\t      var callback = callback || args['callback'] || msg['callback'] || args['success'] || function () {};","\t      var channel = args['channel'] || msg['channel'];","\t      var meta = args['meta'] || args['metadata'];","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var cipher_key = args['cipher_key'];","\t      var err = args['error'] || msg['error'] || function () {};","\t      var post = args['post'] || false;","\t      var store = ('store_in_history' in args) ? args['store_in_history'] : true;","\t      var jsonp = jsonp_cb();","\t      var add_msg = 'push';","\t      var params;","\t      var url;","","\t      if (args['prepend']) add_msg = 'unshift';","","\t      if (!channel) return error('Missing Channel');","\t      if (!PUBLISH_KEY) return error('Missing Publish Key');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      if (msg['getPubnubMessage']) {","\t        msg = msg['getPubnubMessage']();","\t      }","","\t      // If trying to send Object","\t      msg = JSON['stringify'](encrypt(msg, cipher_key));","","\t      // Create URL","\t      url = [","\t        STD_ORIGIN, 'publish',","\t        PUBLISH_KEY, SUBSCRIBE_KEY,","\t        0, utils.encode(channel),","\t        jsonp, utils.encode(msg)","\t      ];","","\t      params = { uuid: UUID, auth: auth_key };","","\t      if (meta && typeof meta === 'object') {","\t        params['meta'] = JSON.stringify(meta);","\t      }","","\t      if (!store) params['store'] = '0';","","\t      if (USE_INSTANCEID) params['instanceid'] = INSTANCEID;","","\t      // Queue Message Send","\t      PUB_QUEUE[add_msg]({","\t        callback: jsonp,","\t        url: url,","\t        data: _get_url_params(params),","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t          publish(1);","\t        },","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t          publish(1);","\t        },","\t        mode: (post) ? 'POST' : 'GET'","\t      });","","\t      // Send Message","\t      publish();","\t    },","","\t    /*","\t     PUBNUB.unsubscribe({ channel : 'my_chat' });","\t     */","\t    unsubscribe: function (args, callback) {","\t      var channelArg = args['channel'];","\t      var channelGroupArg = args['channel_group'];","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var callback = callback || args['callback'] || function () {};","\t      var err = args['error'] || function () {};","","\t      TIMETOKEN = 0;","\t      SUB_RESTORE = 1;   // REVISIT !!!!","","\t      if (!channelArg && !channelGroupArg) return error('Missing Channel or Channel Group');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      if (channelArg) {","\t        var channels = utils.isArray(channelArg) ? channelArg : ('' + channelArg).split(',');","\t        var existingChannels = [];","\t        var presenceChannels = [];","","\t        utils.each(channels, function (channel) {","\t          if (CHANNELS[channel]) existingChannels.push(channel);","\t        });","","\t        // if we do not have any channels to unsubscribe from, trigger a callback.","\t        if (existingChannels.length == 0) {","\t          callback({ action: 'leave' });","\t          return;","\t        }","","\t        // Prepare presence channels","\t        utils.each(existingChannels, function (channel) {","\t          presenceChannels.push(channel + PRESENCE_SUFFIX);","\t        });","","\t        utils.each(existingChannels.concat(presenceChannels), function (channel) {","\t          if (channel in CHANNELS) CHANNELS[channel] = 0;","\t          if (channel in STATE) delete STATE[channel];","\t        });","","\t        var CB_CALLED = true;","\t        if (READY) {","\t          CB_CALLED = SELF['LEAVE'](existingChannels.join(','), 0, auth_key, callback, err);","\t        }","\t        if (!CB_CALLED) callback({ action: 'leave' });","\t      }","","\t      if (channelGroupArg) {","\t        var channelGroups = utils.isArray(channelGroupArg) ? channelGroupArg : ('' + channelGroupArg).split(',');","\t        var existingChannelGroups = [];","\t        var presenceChannelGroups = [];","","\t        utils.each(channelGroups, function (channelGroup) {","\t          if (CHANNEL_GROUPS[channelGroup]) existingChannelGroups.push(channelGroup);","\t        });","","\t        // if we do not have any channel groups to unsubscribe from, trigger a callback.","\t        if (existingChannelGroups.length == 0) {","\t          callback({ action: 'leave' });","\t          return;","\t        }","","\t        // Prepare presence channels","\t        utils.each(existingChannelGroups, function (channelGroup) {","\t          presenceChannelGroups.push(channelGroup + PRESENCE_SUFFIX);","\t        });","","\t        utils.each(existingChannelGroups.concat(presenceChannelGroups), function (channelGroup) {","\t          if (channelGroup in CHANNEL_GROUPS) CHANNEL_GROUPS[channelGroup] = 0;","\t          if (channelGroup in STATE) delete STATE[channelGroup];","\t        });","","\t        var CB_CALLED = true;","\t        if (READY) {","\t          CB_CALLED = SELF['LEAVE_GROUP'](existingChannelGroups.join(','), 0, auth_key, callback, err);","\t        }","\t        if (!CB_CALLED) callback({ action: 'leave' });","\t      }","","\t      // Reset Connection if Count Less","\t      CONNECT();","\t    },","","\t    /*","\t     PUBNUB.subscribe({","\t     channel  : 'my_chat'","\t     callback : function(message) { }","\t     });","\t     */","\t    subscribe: function (args, callback) {","\t      var channel = args['channel'];","\t      var channel_group = args['channel_group'];","\t      var callback = callback || args['callback'];","\t      var callback = callback || args['message'];","\t      var connect = args['connect'] || function () {};","\t      var reconnect = args['reconnect'] || function () {};","\t      var disconnect = args['disconnect'] || function () {};","\t      var SUB_ERROR = args['error'] || SUB_ERROR || function () {};","\t      var idlecb = args['idle'] || function () {};","\t      var presence = args['presence'] || 0;","\t      var noheresync = args['noheresync'] || 0;","\t      var backfill = args['backfill'] || 0;","\t      var timetoken = args['timetoken'] || 0;","\t      var sub_timeout = args['timeout'] || SUB_TIMEOUT;","\t      var windowing = args['windowing'] || SUB_WINDOWING;","\t      var state = args['state'];","\t      var heartbeat = args['heartbeat'] || args['pnexpires'];","\t      var heartbeat_interval = args['heartbeat_interval'];","\t      var restore = args['restore'] || SUB_RESTORE;","","\t      AUTH_KEY = args['auth_key'] || AUTH_KEY;","","\t      // Restore Enabled?","\t      SUB_RESTORE = restore;","","\t      // Always Reset the TT","\t      TIMETOKEN = timetoken;","","\t      // Make sure we have a Channel","\t      if (!channel && !channel_group) {","\t        return error('Missing Channel');","\t      }","","\t      if (!callback) return error('Missing Callback');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      if (heartbeat || heartbeat === 0 || heartbeat_interval || heartbeat_interval === 0) {","\t        SELF['set_heartbeat'](heartbeat, heartbeat_interval);","\t      }","","\t      // Setup Channel(s)","\t      if (channel) {","\t        utils.each((channel.join ? channel.join(',') : '' + channel).split(','),","\t          function (channel) {","\t            var settings = CHANNELS[channel] || {};","","\t            // Store Channel State","\t            CHANNELS[SUB_CHANNEL = channel] = {","\t              name: channel,","\t              connected: settings.connected,","\t              disconnected: settings.disconnected,","\t              subscribed: 1,","\t              callback: SUB_CALLBACK = callback,","\t              cipher_key: args['cipher_key'],","\t              connect: connect,","\t              disconnect: disconnect,","\t              reconnect: reconnect","\t            };","","\t            if (state) {","\t              if (channel in state) {","\t                STATE[channel] = state[channel];","\t              } else {","\t                STATE[channel] = state;","\t              }","\t            }","","\t            // Presence Enabled?","\t            if (!presence) return;","","\t            // Subscribe Presence Channel","\t            SELF['subscribe']({","\t              channel: channel + PRESENCE_SUFFIX,","\t              callback: presence,","\t              restore: restore","\t            });","","\t            // Presence Subscribed?","\t            if (settings.subscribed) return;","","\t            // See Who's Here Now?","\t            if (noheresync) return;","\t            SELF['here_now']({","\t              channel: channel,","\t              data: _get_url_params({ uuid: UUID, auth: AUTH_KEY }),","\t              callback: function (here) {","\t                utils.each('uuids' in here ? here['uuids'] : [], function (uid) {","\t                  presence({","\t                    action: 'join',","\t                    uuid: uid,","\t                    timestamp: Math.floor(utils.rnow() / 1000),","\t                    occupancy: here['occupancy'] || 1","\t                  }, here, channel);","\t                });","\t              }","\t            });","\t          });","\t      }","","\t      // Setup Channel Groups","\t      if (channel_group) {","\t        utils.each((channel_group.join ? channel_group.join(',') : '' + channel_group).split(','),","\t          function (channel_group) {","\t            var settings = CHANNEL_GROUPS[channel_group] || {};","","\t            CHANNEL_GROUPS[channel_group] = {","\t              name: channel_group,","\t              connected: settings.connected,","\t              disconnected: settings.disconnected,","\t              subscribed: 1,","\t              callback: SUB_CALLBACK = callback,","\t              cipher_key: args['cipher_key'],","\t              connect: connect,","\t              disconnect: disconnect,","\t              reconnect: reconnect","\t            };","","\t            // Presence Enabled?","\t            if (!presence) return;","","\t            // Subscribe Presence Channel","\t            SELF['subscribe']({","\t              channel_group: channel_group + PRESENCE_SUFFIX,","\t              callback: presence,","\t              restore: restore,","\t              auth_key: AUTH_KEY","\t            });","","\t            // Presence Subscribed?","\t            if (settings.subscribed) return;","","\t            // See Who's Here Now?","\t            if (noheresync) return;","\t            SELF['here_now']({","\t              channel_group: channel_group,","\t              data: _get_url_params({ uuid: UUID, auth: AUTH_KEY }),","\t              callback: function (here) {","\t                utils.each('uuids' in here ? here['uuids'] : [], function (uid) {","\t                  presence({","\t                    action: 'join',","\t                    uuid: uid,","\t                    timestamp: Math.floor(utils.rnow() / 1000),","\t                    occupancy: here['occupancy'] || 1","\t                  }, here, channel_group);","\t                });","\t              }","\t            });","\t          });","\t      }","","","\t      // Test Network Connection","\t      function _test_connection(success) {","\t        if (success) {","\t          // Begin Next Socket Connection","\t          utils.timeout(CONNECT, windowing);","\t        } else {","\t          // New Origin on Failed Connection","\t          STD_ORIGIN = nextorigin(ORIGIN, 1);","\t          SUB_ORIGIN = nextorigin(ORIGIN, 1);","","\t          // Re-test Connection","\t          utils.timeout(function () {","\t            SELF['time'](_test_connection);","\t          }, SECOND);","\t        }","","\t        // Disconnect & Reconnect","\t        each_channel(function (channel) {","\t          // Reconnect","\t          if (success && channel.disconnected) {","\t            channel.disconnected = 0;","\t            return channel.reconnect(channel.name);","\t          }","","\t          // Disconnect","\t          if (!success && !channel.disconnected) {","\t            channel.disconnected = 1;","\t            channel.disconnect(channel.name);","\t          }","\t        });","","\t        // Disconnect & Reconnect for channel groups","\t        each_channel_group(function (channel_group) {","\t          // Reconnect","\t          if (success && channel_group.disconnected) {","\t            channel_group.disconnected = 0;","\t            return channel_group.reconnect(channel_group.name);","\t          }","","\t          // Disconnect","\t          if (!success && !channel_group.disconnected) {","\t            channel_group.disconnected = 1;","\t            channel_group.disconnect(channel_group.name);","\t          }","\t        });","\t      }","","\t      // Evented Subscribe","\t      function _connect() {","\t        var jsonp = jsonp_cb();","\t        var channels = generate_channel_list(CHANNELS).join(',');","\t        var channel_groups = generate_channel_group_list(CHANNEL_GROUPS).join(',');","","\t        // Stop Connection","\t        if (!channels && !channel_groups) return;","","\t        if (!channels) channels = ',';","","\t        // Connect to PubNub Subscribe Servers","\t        _reset_offline();","","\t        var data = _get_url_params({ uuid: UUID, auth: AUTH_KEY });","","\t        if (channel_groups) {","\t          data['channel-group'] = channel_groups;","\t        }","","","\t        var st = JSON.stringify(STATE);","\t        if (st.length > 2) data['state'] = JSON.stringify(STATE);","","\t        if (PRESENCE_HB) data['heartbeat'] = PRESENCE_HB;","","\t        if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t        start_presence_heartbeat();","\t        SUB_RECEIVER = xdr({","\t          timeout: sub_timeout,","\t          callback: jsonp,","\t          fail: function (response) {","\t            if (response && response['error'] && response['service']) {","\t              _invoke_error(response, SUB_ERROR);","\t              _test_connection(false);","\t            } else {","\t              SELF['time'](function (success) {","\t                !success && (_invoke_error(response, SUB_ERROR));","\t                _test_connection(success);","\t              });","\t            }","\t          },","\t          data: _get_url_params(data),","\t          url: [","\t            SUB_ORIGIN, 'subscribe',","\t            SUBSCRIBE_KEY, utils.encode(channels),","\t            jsonp, TIMETOKEN","\t          ],","\t          success: function (messages) {","\t            // Check for Errors","\t            if (!messages || (typeof messages == 'object' && 'error' in messages && messages['error'])) {","\t              SUB_ERROR(messages);","\t              return utils.timeout(CONNECT, SECOND);","\t            }","","\t            // User Idle Callback","\t            idlecb(messages[1]);","","\t            // Restore Previous Connection Point if Needed","\t            TIMETOKEN = !TIMETOKEN && SUB_RESTORE && db['get'](SUBSCRIBE_KEY) || messages[1];","","\t            /*","\t             // Connect","\t             each_channel_registry(function(registry){","\t             if (registry.connected) return;","\t             registry.connected = 1;","\t             registry.connect(channel.name);","\t             });","\t             */","","\t            // Connect","\t            each_channel(function (channel) {","\t              if (channel.connected) return;","\t              channel.connected = 1;","\t              channel.connect(channel.name);","\t            });","","\t            // Connect for channel groups","\t            each_channel_group(function (channel_group) {","\t              if (channel_group.connected) return;","\t              channel_group.connected = 1;","\t              channel_group.connect(channel_group.name);","\t            });","","\t            if (RESUMED && !SUB_RESTORE) {","\t              TIMETOKEN = 0;","\t              RESUMED = false;","\t              // Update Saved Timetoken","\t              db['set'](SUBSCRIBE_KEY, 0);","\t              utils.timeout(_connect, windowing);","\t              return;","\t            }","","\t            // Invoke Memory Catchup and Receive Up to 100","\t            // Previous Messages from the Queue.","\t            if (backfill) {","\t              TIMETOKEN = 10000;","\t              backfill = 0;","\t            }","","\t            // Update Saved Timetoken","\t            db['set'](SUBSCRIBE_KEY, messages[1]);","","\t            // Route Channel <---> Callback for Message","\t            var next_callback = (function () {","\t              var channels = '';","\t              var channels2 = '';","","\t              if (messages.length > 3) {","\t                channels = messages[3];","\t                channels2 = messages[2];","\t              } else if (messages.length > 2) {","\t                channels = messages[2];","\t              } else {","\t                channels = utils.map(","\t                  generate_channel_list(CHANNELS), function (chan) {","\t                    return utils.map(","\t                      Array(messages[0].length)","\t                        .join(',').split(','),","\t                      function () {","\t                        return chan;","\t                      }","\t                    );","\t                  }).join(',');","\t              }","","\t              var list = channels.split(',');","\t              var list2 = (channels2) ? channels2.split(',') : [];","","\t              return function () {","\t                var channel = list.shift() || SUB_CHANNEL;","\t                var channel2 = list2.shift();","","\t                var chobj = {};","","\t                if (channel2) {","\t                  if (channel && channel.indexOf('-pnpres') >= 0","\t                    && channel2.indexOf('-pnpres') < 0) {","\t                    channel2 += '-pnpres';","\t                  }","\t                  chobj = CHANNEL_GROUPS[channel2] || CHANNELS[channel2] || { callback: function () {} };","\t                } else {","\t                  chobj = CHANNELS[channel];","\t                }","","\t                var r = [","\t                  chobj","\t                    .callback || SUB_CALLBACK,","\t                  channel.split(PRESENCE_SUFFIX)[0]","\t                ];","\t                channel2 && r.push(channel2.split(PRESENCE_SUFFIX)[0]);","\t                return r;","\t              };","\t            })();","","\t            var latency = detect_latency(+messages[1]);","\t            utils.each(messages[0], function (msg) {","\t              var next = next_callback();","\t              var decrypted_msg = decrypt(msg,","\t                (CHANNELS[next[1]]) ? CHANNELS[next[1]]['cipher_key'] : null);","\t              next[0] && next[0](decrypted_msg, messages, next[2] || next[1], latency, next[1]);","\t            });","","\t            utils.timeout(_connect, windowing);","\t          }","\t        });","\t      }","","\t      CONNECT = function () {","\t        _reset_offline();","\t        utils.timeout(_connect, windowing);","\t      };","","\t      // Reduce Status Flicker","\t      if (!READY) return READY_BUFFER.push(CONNECT);","","\t      // Connect Now","\t      CONNECT();","\t    },","","\t    /*","\t     PUBNUB.here_now({ channel : 'my_chat', callback : fun });","\t     */","\t    here_now: function (args, callback) {","\t      var callback = args['callback'] || callback;","\t      var debug = args['debug'];","\t      var err = args['error'] || function () {};","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var channel = args['channel'];","\t      var channel_group = args['channel_group'];","\t      var jsonp = jsonp_cb();","\t      var uuids = ('uuids' in args) ? args['uuids'] : true;","\t      var state = args['state'];","\t      var data = { uuid: UUID, auth: auth_key };","","\t      if (!uuids) data['disable_uuids'] = 1;","\t      if (state) data['state'] = 1;","","\t      // Make sure we have a Channel","\t      if (!callback) return error('Missing Callback');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      var url = [","\t        STD_ORIGIN, 'v2', 'presence',","\t        'sub_key', SUBSCRIBE_KEY","\t      ];","","\t      channel && url.push('channel') && url.push(utils.encode(channel));","","\t      if (jsonp != '0') {","\t        data['callback'] = jsonp;","\t      }","","\t      if (channel_group) {","\t        data['channel-group'] = channel_group;","\t        !channel && url.push('channel') && url.push(',');","\t      }","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      xdr({","\t        callback: jsonp,","\t        data: _get_url_params(data),","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        debug: debug,","\t        url: url","\t      });","\t    },","","\t    /*","\t     PUBNUB.current_channels_by_uuid({ channel : 'my_chat', callback : fun });","\t     */","\t    where_now: function (args, callback) {","\t      var callback = args['callback'] || callback;","\t      var err = args['error'] || function () {};","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var jsonp = jsonp_cb();","\t      var uuid = args['uuid'] || UUID;","\t      var data = { auth: auth_key };","","\t      // Make sure we have a Channel","\t      if (!callback) return error('Missing Callback');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      if (jsonp != '0') {","\t        data['callback'] = jsonp;","\t      }","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      xdr({","\t        callback: jsonp,","\t        data: _get_url_params(data),","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: [","\t          STD_ORIGIN, 'v2', 'presence',","\t          'sub_key', SUBSCRIBE_KEY,","\t          'uuid', utils.encode(uuid)","\t        ]","\t      });","\t    },","","\t    state: function (args, callback) {","\t      var callback = args['callback'] || callback || function (r) {};","\t      var err = args['error'] || function () {};","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var jsonp = jsonp_cb();","\t      var state = args['state'];","\t      var uuid = args['uuid'] || UUID;","\t      var channel = args['channel'];","\t      var channel_group = args['channel_group'];","\t      var url;","\t      var data = _get_url_params({ auth: auth_key });","","\t      // Make sure we have a Channel","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","\t      if (!uuid) return error('Missing UUID');","\t      if (!channel && !channel_group) return error('Missing Channel');","","\t      if (jsonp != '0') {","\t        data['callback'] = jsonp;","\t      }","","\t      if (typeof channel != 'undefined'","\t        && CHANNELS[channel] && CHANNELS[channel].subscribed) {","\t        if (state) STATE[channel] = state;","\t      }","","\t      if (typeof channel_group != 'undefined'","\t        && CHANNEL_GROUPS[channel_group]","\t        && CHANNEL_GROUPS[channel_group].subscribed","\t      ) {","\t        if (state) STATE[channel_group] = state;","\t        data['channel-group'] = channel_group;","","\t        if (!channel) {","\t          channel = ',';","\t        }","\t      }","","\t      data['state'] = JSON.stringify(state);","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      if (state) {","\t        url = [","\t          STD_ORIGIN, 'v2', 'presence',","\t          'sub-key', SUBSCRIBE_KEY,","\t          'channel', channel,","\t          'uuid', uuid, 'data'","\t        ];","\t      } else {","\t        url = [","\t          STD_ORIGIN, 'v2', 'presence',","\t          'sub-key', SUBSCRIBE_KEY,","\t          'channel', channel,","\t          'uuid', utils.encode(uuid)","\t        ];","\t      }","","\t      xdr({","\t        callback: jsonp,","\t        data: _get_url_params(data),","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: url","","\t      });","\t    },","","\t    /*","\t     PUBNUB.grant({","\t     channel  : 'my_chat',","\t     callback : fun,","\t     error    : fun,","\t     ttl      : 24 * 60, // Minutes","\t     read     : true,","\t     write    : true,","\t     auth_key : '3y8uiajdklytowsj'","\t     });","\t     */","\t    grant: function (args, callback) {","\t      var callback = args['callback'] || callback;","\t      var err = args['error'] || function () {};","\t      var channel = args['channel'] || args['channels'];","\t      var channel_group = args['channel_group'];","\t      var jsonp = jsonp_cb();","\t      var ttl = args['ttl'];","\t      var r = (args['read']) ? '1' : '0';","\t      var w = (args['write']) ? '1' : '0';","\t      var m = (args['manage']) ? '1' : '0';","\t      var auth_key = args['auth_key'] || args['auth_keys'];","","\t      if (!callback) return error('Missing Callback');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","\t      if (!PUBLISH_KEY) return error('Missing Publish Key');","\t      if (!SECRET_KEY) return error('Missing Secret Key');","","\t      var timestamp = Math.floor(new Date().getTime() / 1000);","\t      var sign_input = SUBSCRIBE_KEY + '\\n' + PUBLISH_KEY + '\\n' + 'grant' + '\\n';","","\t      var data = { w: w, r: r, timestamp: timestamp };","","\t      if (args['manage']) {","\t        data['m'] = m;","\t      }","\t      if (utils.isArray(channel)) {","\t        channel = channel['join'](',');","\t      }","\t      if (utils.isArray(auth_key)) {","\t        auth_key = auth_key['join'](',');","\t      }","\t      if (typeof channel != 'undefined' && channel != null && channel.length > 0) data['channel'] = channel;","\t      if (typeof channel_group != 'undefined' && channel_group != null && channel_group.length > 0) {","\t        data['channel-group'] = channel_group;","\t      }","\t      if (jsonp != '0') {","\t        data['callback'] = jsonp;","\t      }","\t      if (ttl || ttl === 0) data['ttl'] = ttl;","","\t      if (auth_key) data['auth'] = auth_key;","","\t      data = _get_url_params(data);","","\t      if (!auth_key) delete data['auth'];","","\t      sign_input += _get_pam_sign_input_from_params(data);","","\t      var signature = hmac_SHA256(sign_input, SECRET_KEY);","","\t      signature = signature.replace(/\\+/g, '-');","\t      signature = signature.replace(/\\//g, '_');","","\t      data['signature'] = signature;","","\t      xdr({","\t        callback: jsonp,","\t        data: data,","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: [","\t          STD_ORIGIN, 'v1', 'auth', 'grant',","\t          'sub-key', SUBSCRIBE_KEY","\t        ]","\t      });","\t    },","","\t    /*","\t     PUBNUB.mobile_gw_provision ({","\t     device_id: 'A655FBA9931AB',","\t     op       : 'add' | 'remove',","\t     gw_type  : 'apns' | 'gcm',","\t     channel  : 'my_chat',","\t     callback : fun,","\t     error    : fun,","\t     });","\t     */","","\t    mobile_gw_provision: function (args) {","\t      var callback = args['callback'] || function () {};","\t      var auth_key = args['auth_key'] || AUTH_KEY;","\t      var err = args['error'] || function () {};","\t      var jsonp = jsonp_cb();","\t      var channel = args['channel'];","\t      var op = args['op'];","\t      var gw_type = args['gw_type'];","\t      var device_id = args['device_id'];","\t      var params;","\t      var url;","","\t      if (!device_id) return error('Missing Device ID (device_id)');","\t      if (!gw_type) return error('Missing GW Type (gw_type: gcm or apns)');","\t      if (!op) return error('Missing GW Operation (op: add or remove)');","\t      if (!channel) return error('Missing gw destination Channel (channel)');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","","\t      // Create URL","\t      url = [","\t        STD_ORIGIN, 'v1/push/sub-key',","\t        SUBSCRIBE_KEY, 'devices', device_id","\t      ];","","\t      params = { uuid: UUID, auth: auth_key, type: gw_type };","","\t      if (op == 'add') {","\t        params['add'] = channel;","\t      } else if (op == 'remove') {","\t        params['remove'] = channel;","\t      }","","\t      if (USE_INSTANCEID) params['instanceid'] = INSTANCEID;","","\t      xdr({","\t        callback: jsonp,","\t        data: params,","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: url","\t      });","\t    },","","\t    /*","\t     PUBNUB.audit({","\t     channel  : 'my_chat',","\t     callback : fun,","\t     error    : fun,","\t     read     : true,","\t     write    : true,","\t     auth_key : '3y8uiajdklytowsj'","\t     });","\t     */","\t    audit: function (args, callback) {","\t      var callback = args['callback'] || callback;","\t      var err = args['error'] || function () {};","\t      var channel = args['channel'];","\t      var channel_group = args['channel_group'];","\t      var auth_key = args['auth_key'];","\t      var jsonp = jsonp_cb();","","\t      // Make sure we have a Channel","\t      if (!callback) return error('Missing Callback');","\t      if (!SUBSCRIBE_KEY) return error('Missing Subscribe Key');","\t      if (!PUBLISH_KEY) return error('Missing Publish Key');","\t      if (!SECRET_KEY) return error('Missing Secret Key');","","\t      var timestamp = Math.floor(new Date().getTime() / 1000);","\t      var sign_input = SUBSCRIBE_KEY + '\\n' + PUBLISH_KEY + '\\n' + 'audit' + '\\n';","","\t      var data = { timestamp: timestamp };","\t      if (jsonp != '0') {","\t        data['callback'] = jsonp;","\t      }","\t      if (typeof channel != 'undefined' && channel != null && channel.length > 0) data['channel'] = channel;","\t      if (typeof channel_group != 'undefined' && channel_group != null && channel_group.length > 0) {","\t        data['channel-group'] = channel_group;","\t      }","\t      if (auth_key) data['auth'] = auth_key;","","\t      data = _get_url_params(data);","","\t      if (!auth_key) delete data['auth'];","","\t      sign_input += _get_pam_sign_input_from_params(data);","","\t      var signature = hmac_SHA256(sign_input, SECRET_KEY);","","\t      signature = signature.replace(/\\+/g, '-');","\t      signature = signature.replace(/\\//g, '_');","","\t      data['signature'] = signature;","\t      xdr({","\t        callback: jsonp,","\t        data: data,","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        },","\t        url: [","\t          STD_ORIGIN, 'v1', 'auth', 'audit',","\t          'sub-key', SUBSCRIBE_KEY","\t        ]","\t      });","\t    },","","\t    /*","\t     PUBNUB.revoke({","\t     channel  : 'my_chat',","\t     callback : fun,","\t     error    : fun,","\t     auth_key : '3y8uiajdklytowsj'","\t     });","\t     */","\t    revoke: function (args, callback) {","\t      args['read'] = false;","\t      args['write'] = false;","\t      SELF['grant'](args, callback);","\t    },","","\t    set_uuid: function (uuid) {","\t      UUID = uuid;","\t      CONNECT();","\t    },","","\t    get_uuid: function () {","\t      return UUID;","\t    },","","\t    isArray: function (arg) {","\t      return utils.isArray(arg);","\t    },","","\t    get_subscribed_channels: function () {","\t      return generate_channel_list(CHANNELS, true);","\t    },","","\t    presence_heartbeat: function (args) {","\t      var callback = args['callback'] || function () {};","\t      var err = args['error'] || function () {};","\t      var jsonp = jsonp_cb();","\t      var data = { uuid: UUID, auth: AUTH_KEY };","","\t      var st = JSON['stringify'](STATE);","\t      if (st.length > 2) data['state'] = JSON['stringify'](STATE);","","\t      if (PRESENCE_HB > 0 && PRESENCE_HB < 320) data['heartbeat'] = PRESENCE_HB;","","\t      if (jsonp != '0') {","\t        data['callback'] = jsonp;","\t      }","","\t      var channels = utils.encode(generate_channel_list(CHANNELS, true)['join'](','));","\t      var channel_groups = generate_channel_group_list(CHANNEL_GROUPS, true)['join'](',');","","\t      if (!channels) channels = ',';","\t      if (channel_groups) data['channel-group'] = channel_groups;","","\t      if (USE_INSTANCEID) data['instanceid'] = INSTANCEID;","","\t      xdr({","\t        callback: jsonp,","\t        data: _get_url_params(data),","\t        url: [","\t          STD_ORIGIN, 'v2', 'presence',","\t          'sub-key', SUBSCRIBE_KEY,","\t          'channel', channels,","\t          'heartbeat'","\t        ],","\t        success: function (response) {","\t          _invoke_callback(response, callback, err);","\t        },","\t        fail: function (response) {","\t          _invoke_error(response, err);","\t        }","\t      });","\t    },","","\t    stop_timers: function () {","\t      clearTimeout(_poll_timer);","\t      clearTimeout(_poll_timer2);","\t      clearTimeout(PRESENCE_HB_TIMEOUT);","\t    },","","\t    shutdown: function () {","\t      SELF['stop_timers']();","\t      shutdown && shutdown();","\t    },","","\t    // Expose PUBNUB Functions","\t    xdr: xdr,","\t    ready: ready,","\t    db: db,","\t    uuid: utils.generateUUID,","\t    map: utils.map,","\t    each: utils.each,","\t    'each-channel': each_channel,","\t    grep: utils.grep,","\t    offline: function () {","\t      _reset_offline(1, { message: 'Offline. Please check your network settings.' });","\t    },","\t    supplant: utils.supplant,","\t    now: utils.rnow,","\t    unique: unique,","\t    updater: utils.updater","\t  };","","\t  function _poll_online() {","\t    _is_online() || _reset_offline(1, { error: 'Offline. Please check your network settings.' });","\t    _poll_timer && clearTimeout(_poll_timer);","\t    _poll_timer = utils.timeout(_poll_online, SECOND);","\t  }","","\t  function _poll_online2() {","\t    if (!TIME_CHECK) return;","\t    SELF['time'](function (success) {","\t      detect_time_detla(function () {","\t      }, success);","\t      success || _reset_offline(1, {","\t        error: 'Heartbeat failed to connect to Pubnub Servers.' +","\t        'Please check your network settings.'","\t      });","\t      _poll_timer2 && clearTimeout(_poll_timer2);","\t      _poll_timer2 = utils.timeout(_poll_online2, KEEPALIVE);","\t    });","\t  }","","\t  function _reset_offline(err, msg) {","\t    SUB_RECEIVER && SUB_RECEIVER(err, msg);","\t    SUB_RECEIVER = null;","","\t    clearTimeout(_poll_timer);","\t    clearTimeout(_poll_timer2);","\t  }","","\t  if (!UUID) UUID = SELF['uuid']();","\t  if (!INSTANCEID) INSTANCEID = SELF['uuid']();","\t  db['set'](SUBSCRIBE_KEY + 'uuid', UUID);","","\t  _poll_timer = utils.timeout(_poll_online, SECOND);","\t  _poll_timer2 = utils.timeout(_poll_online2, KEEPALIVE);","\t  PRESENCE_HB_TIMEOUT = utils.timeout(","\t    start_presence_heartbeat,","\t    (PRESENCE_HB_INTERVAL - 3) * SECOND","\t  );","","\t  // Detect Age of Message","\t  function detect_latency(tt) {","\t    var adjusted_time = utils.rnow() - TIME_DRIFT;","\t    return adjusted_time - tt / 10000;","\t  }","","\t  detect_time_detla();","\t  function detect_time_detla(cb, time) {","\t    var stime = utils.rnow();","","\t    time && calculate(time) || SELF['time'](calculate);","","\t    function calculate(time) {","\t      if (!time) return;","\t      var ptime = time / 10000;","\t      var latency = (utils.rnow() - stime) / 2;","\t      TIME_DRIFT = utils.rnow() - (ptime + latency);","\t      cb && cb(TIME_DRIFT);","\t    }","\t  }","","\t  return SELF;","\t}","","\tmodule.exports = {","\t  PN_API: PN_API,","\t  unique: unique,","\t  PNmessage: PNmessage,","\t  DEF_TIMEOUT: DEF_TIMEOUT,","\t  timeout: utils.timeout,","\t  build_url: utils.buildURL,","\t  each: utils.each,","\t  uuid: utils.generateUUID,","\t  URLBIT: defaultConfiguration.URLBIT,","\t  grep: utils.grep,","\t  supplant: utils.supplant,","\t  now: utils.rnow,","\t  updater: utils.updater,","\t  map: utils.map","\t};","","","/***/ },","/* 6 */","/***/ function(module, exports) {","","\tmodule.exports = {","\t\t\"PARAMSBIT\": \"&\",","\t\t\"URLBIT\": \"/\"","\t};","","/***/ },","/* 7 */","/***/ function(module, exports, __webpack_require__) {","","\t/* eslint no-unused-expressions: 0, block-scoped-var: 0, no-redeclare: 0, guard-for-in: 0 */","","\tvar defaultConfiguration = __webpack_require__(6);","\tvar REPL = /{([\\w\\-]+)}/g;","","\tfunction rnow() {","\t  return +new Date;","\t}","","\tfunction isArray(arg) {","\t  return !!arg && typeof arg !== 'string' && (Array.isArray && Array.isArray(arg) || typeof(arg.length) === 'number');","\t  // return !!arg && (Array.isArray && Array.isArray(arg) || typeof(arg.length) === \"number\")","\t}","","\t/**","\t * EACH","\t * ====","\t * each( [1,2,3], function(item) { } )","\t */","\tfunction each(o, f) {","\t  if (!o || !f) {","\t    return;","\t  }","","\t  if (isArray(o)) {","\t    for (var i = 0, l = o.length; i < l;) {","\t      f.call(o[i], o[i], i++);","\t    }","\t  } else {","\t    for (var i in o) {","\t      o.hasOwnProperty &&","\t      o.hasOwnProperty(i) &&","\t      f.call(o[i], i, o[i]);","\t    }","\t  }","\t}","","\t/**","\t * ENCODE","\t * ======","\t * var encoded_data = encode('path');","\t */","\tfunction encode(path) { return encodeURIComponent(path); }","","\t/**","\t * Build Url","\t * =======","\t *","\t */","\tfunction buildURL(urlComponents, urlParams) {","\t  var url = urlComponents.join(defaultConfiguration.URLBIT);","\t  var params = [];","","\t  if (!urlParams) return url;","","\t  each(urlParams, function (key, value) {","\t    var valueStr = (typeof value === 'object') ? JSON['stringify'](value) : value;","\t    (typeof value !== 'undefined' &&","\t      value !== null && encode(valueStr).length > 0","\t    ) && params.push(key + '=' + encode(valueStr));","\t  });","","\t  url += '?' + params.join(defaultConfiguration.PARAMSBIT);","\t  return url;","\t}","","\t/**","\t * UPDATER","\t * =======","\t * var timestamp = unique();","\t */","\tfunction updater(fun, rate) {","\t  var timeout;","\t  var last = 0;","\t  var runnit = function () {","\t    if (last + rate > rnow()) {","\t      clearTimeout(timeout);","\t      timeout = setTimeout(runnit, rate);","\t    } else {","\t      last = rnow();","\t      fun();","\t    }","\t  };","","\t  return runnit;","\t}","","\t/**","\t * GREP","\t * ====","\t * var list = grep( [1,2,3], function(item) { return item % 2 } )","\t */","\tfunction grep(list, fun) {","\t  var fin = [];","\t  each(list || [], function (l) {","\t    fun(l) && fin.push(l);","\t  });","\t  return fin;","\t}","","\t/**","\t * SUPPLANT","\t * ========","\t * var text = supplant( 'Hello {name}!', { name : 'John' } )","\t */","\tfunction supplant(str, values) {","\t  return str.replace(REPL, function (_, match) {","\t    return values[match] || _;","\t  });","\t}","","\t/**","\t * timeout","\t * =======","\t * timeout( function(){}, 100 );","\t */","\tfunction timeout(fun, wait) {","\t  if (typeof setTimeout === 'undefined') {","\t    return;","\t  }","","\t  return setTimeout(fun, wait);","\t}","","\t/**","\t * uuid","\t * ====","\t * var my_uuid = generateUUID();","\t */","\tfunction generateUUID(callback) {","\t  var u = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,","\t    function (c) {","\t      var r = Math.random() * 16 | 0;","\t      var v = c === 'x' ? r : (r & 0x3 | 0x8);","\t      return v.toString(16);","\t    });","\t  if (callback) callback(u);","\t  return u;","\t}","","\t/**","\t * MAP","\t * ===","\t * var list = map( [1,2,3], function(item) { return item + 1 } )","\t */","\tfunction map(list, fun) {","\t  var fin = [];","\t  each(list || [], function (k, v) {","\t    fin.push(fun(k, v));","\t  });","\t  return fin;","\t}","","","\tfunction pamEncode(str) {","\t  return encodeURIComponent(str).replace(/[!'()*~]/g, function (c) {","\t    return '%' + c.charCodeAt(0).toString(16).toUpperCase();","\t  });","\t}","","","\tmodule.exports = {","\t  buildURL: buildURL,","\t  encode: encode,","\t  each: each,","\t  updater: updater,","\t  rnow: rnow,","\t  isArray: isArray,","\t  map: map,","\t  pamEncode: pamEncode,","\t  generateUUID: generateUUID,","\t  timeout: timeout,","\t  supplant: supplant,","\t  grep: grep","\t};","","","/***/ },","/* 8 */","/***/ function(module, exports) {","","\t// ---------------------------------------------------------------------------","\t// WEBSOCKET INTERFACE","\t// ---------------------------------------------------------------------------","\tvar WS = function( url, protocols ) {","\t  if (!(this instanceof WS)) return new WS( url, protocols );","","\t  var self     = this","\t    ,   url      = self.url      = url || ''","\t    ,   protocol = self.protocol = protocols || 'Sec-WebSocket-Protocol'","\t    ,   bits     = url.split('/')","\t    ,   setup    = {","\t    'ssl'           : bits[0] === 'wss:'","\t    ,'origin'        : bits[2]","\t    ,'publish_key'   : bits[3]","\t    ,'subscribe_key' : bits[4]","\t    ,'channel'       : bits[5]","\t  };","","\t  // READY STATES","\t  self['CONNECTING'] = 0; // The connection is not yet open.","\t  self['OPEN']       = 1; // The connection is open and ready to communicate.","\t  self['CLOSING']    = 2; // The connection is in the process of closing.","\t  self['CLOSED']     = 3; // The connection is closed or couldn't be opened.","","\t  // CLOSE STATES","\t  self['CLOSE_NORMAL']         = 1000; // Normal Intended Close; completed.","\t  self['CLOSE_GOING_AWAY']     = 1001; // Closed Unexpecttedly.","\t  self['CLOSE_PROTOCOL_ERROR'] = 1002; // Server: Not Supported.","\t  self['CLOSE_UNSUPPORTED']    = 1003; // Server: Unsupported Protocol.","\t  self['CLOSE_TOO_LARGE']      = 1004; // Server: Too Much Data.","\t  self['CLOSE_NO_STATUS']      = 1005; // Server: No reason.","\t  self['CLOSE_ABNORMAL']       = 1006; // Abnormal Disconnect.","","\t  // Events Default","\t  self['onclose']   = self['onerror'] =","\t    self['onmessage'] = self['onopen']  =","\t      self['onsend']    =  function(){};","","\t  // Attributes","\t  self['binaryType']     = '';","\t  self['extensions']     = '';","\t  self['bufferedAmount'] = 0;","\t  self['trasnmitting']   = false;","\t  self['buffer']         = [];","\t  self['readyState']     = self['CONNECTING'];","","\t  // Close if no setup.","\t  if (!url) {","\t    self['readyState'] = self['CLOSED'];","\t    self['onclose']({","\t      'code'     : self['CLOSE_ABNORMAL'],","\t      'reason'   : 'Missing URL',","\t      'wasClean' : true","\t    });","\t    return self;","\t  }","","\t  // PubNub WebSocket Emulation","\t  self.pubnub       = PUBNUB['init'](setup);","\t  self.pubnub.setup = setup;","\t  self.setup        = setup;","","\t  self.pubnub['subscribe']({","\t    'restore'    : false,","\t    'channel'    : setup['channel'],","\t    'disconnect' : self['onerror'],","\t    'reconnect'  : self['onopen'],","\t    'error'      : function() {","\t      self['onclose']({","\t        'code'     : self['CLOSE_ABNORMAL'],","\t        'reason'   : 'Missing URL',","\t        'wasClean' : false","\t      });","\t    },","\t    'callback'   : function(message) {","\t      self['onmessage']({ 'data' : message });","\t    },","\t    'connect'    : function() {","\t      self['readyState'] = self['OPEN'];","\t      self['onopen']();","\t    }","\t  });","\t};","","\t// ---------------------------------------------------------------------------","\t// WEBSOCKET SEND","\t// ---------------------------------------------------------------------------","\tWS.prototype.send = function(data) {","\t  var self = this;","\t  self.pubnub['publish']({","\t    'channel'  : self.pubnub.setup['channel'],","\t    'message'  : data,","\t    'callback' : function(response) {","\t      self['onsend']({ 'data' : response });","\t    }","\t  });","\t};","","\t// ---------------------------------------------------------------------------","\t// WEBSOCKET CLOSE","\t// ---------------------------------------------------------------------------","\tWS.prototype.close = function() {","\t  var self = this;","\t  self.pubnub['unsubscribe']({ 'channel' : self.pubnub.setup['channel'] });","\t  self['readyState'] = self['CLOSED'];","\t  self['onclose']({});","\t};","","\tmodule.exports = WS;","","","/***/ }","/******/ ])","});",";"],"id":2}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":749,"column":42},"end":{"row":749,"column":42},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":10,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1461005702000,"hash":"04233cef53b1acd70e688004790ff62608acc0d8"}